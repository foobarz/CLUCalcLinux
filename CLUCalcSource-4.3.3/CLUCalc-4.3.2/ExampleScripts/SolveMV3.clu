// Define the basis variables for Euclidean space
DefVarsE3();

// Define a multivector variable as e1
A = e1;

// Generate a mask for vector components.
// Enforce that e2 and e3 are regarded as
// one dimension in the solution space 
// and must have the same scalar factor.
Mask = [0, 			/* Scalar */
		1, 2, 2, 	/* Vector (e1, e2, e3) */
		0, 0, 0, 	/* Bivector (e23, e31, e12) */
		0			/* Trivector (Pseudoscalar) */
		];

// Generate the multivector product matrix of A
// for the inner product. Apply the mask
// such that only bivector components are
// considered.
MA = GetMVProductMatrix(A, MVOP_INNER, Mask);

// Find the null space of MA with a 
// singular value decomposition
W = SVD(MA);

// Transform the diagonal matrix of the
// singular values to a row vector and
// display it
?Diag = DiagToRow(W(2));

// Transform the singular vectors to multivectors.
// Now you need to specify the mask again, such
// that the matrix components are mapped to the
// correct multivector components.
?V = Matrix2MV(W(3), Mask);

// Print the first(singular) multivector
// which spans the basis of the bivector 
// null space of e1 w.r.t. the inner product.
?V(1);

// Test the caluculation by evaluating the
// inner product with all singular multivectors.
?A . V;
