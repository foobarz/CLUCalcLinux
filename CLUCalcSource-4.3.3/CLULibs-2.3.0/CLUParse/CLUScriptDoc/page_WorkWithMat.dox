/** \page page_WorkWithMat Working with Matrices

<ul>
	<li> \ref sec_MatrixBasics
	<li> \ref sec_MatrixPointOperators
	<li> \ref sec_MatrixLogic
	<li> \ref sec_MatrixPrint
	<li> \ref sec_MatrixExamples
</ul>
	
So far only simple matrix operations are implemented in CLUScript. Matrices where mainly implemented in order to show the connection between Clifford algebra and Matrices, i.e. linear algebra. It is also possible to visualize the range of \f$3\times 3\f$ matrices. 

<hr>
\section sec_MatrixBasics The Basics

For matrices the following operators are defined: addition <tt>+</tt>, subtraction and negation <tt>-</tt>, matrix multiplication <tt>*</tt>, transposition <tt>~</tt> and inversion <tt>!</tt>. If a matrix has no inverse the inversion operator returns the "next best" inverse, i.e. the pseudo-inverse. Matrix division <tt>/</tt> is also defined, whereby \f$A / B = A B^{-1}\f$, just as for multivectors.

A matrix is created with the function <tt>Matrix</tt> which expects either one or two parameters. If you call <tt>Matrix</tt> with a single parameter then this parameter has to be a nested list of order two, i.e. something like <tt>[[1,2], [3,4]]</tt>. Each sublist represents a row of the matrix. Matrices do not have to be square but each row must have the same number of elements. You may also call <tt>Matrix</tt> with two counter parameters. In that case the function returns a matrix of the given number of rows and columns, where every element is set to zero. For example, <tt>Matrix(2,3)</tt> returns a \f$2\times 3\f$ null matrix.

You can also change the value of matrix components using the selection operator <tt>()</tt>. For example, given that <tt>M</tt> is a 3 by 3 matrix, the value of the matrix at row two and column three can be set to a particular value by writing <tt>M(2,3) = 5.2</tt>. Here is a code example,

\code

?M = Matrix( [[1,2], [3,4]] );
M(1,2) = 10;
?M;
\endcode

This produces the following output.
\code

M = (| 1 2|, | 3 4|)
M = (| 1 10|, | 3 4|)
\endcode

You can also extract the i'th row of a matrix by passing the row index as only parameter to the selection operator. That is, if \c M is a matrix variable, then <tt>M(2)</tt> returns the second row. For example,

\code
?M = Matrix( [[1,2], [3,4]] );
?M(2);
\endcode

produces the output

\code
M = (| 1 2|, | 3 4|)
Constant = (| 3 4|)
\endcode

A submatrix can be extracted by passing four parameters. If \c M is a matrix variable then <tt>M(i,j, m,n)</tt> returns the submatrix of \c M starting at row \c i and column \c j, and extending over \c m rows and \c n columns. A column of a matrix can thus be extracted via

\code
?M = Matrix( [[1,2,3], [4,5,6], [7,8,9]] );
?M(1,2, 3,1);	// Second row of M
\endcode

gives

\code
M = (| 1 2 3|, | 4 5 6|, | 7 8 9|)
Constant = (| 2|, | 5|, | 8|)
\endcode

Just as for lists, it is also possible to extract a number of elements of a matrix at the same time using an index list. Here is an example,

\code
?M = Matrix( [[1,2,3], [4,5,6], [7,8,9]] );
?M([ [1,2], /* Row 1, Col. 2 */
	 [3,1]] /* Row 3, Col. 1 */);	 
\endcode

which results in

\code
M = (| 1 2 3|, | 4 5 6|, | 7 8 9|)
Constant = [2, 7]
\endcode

In much the same way you can also extract a list of rows, or a list of submatrices.

\code
?M = Matrix( [[1,2,3], [4,5,6], [7,8,9]] );

?M([ [1], /* Row 1 */
	 [3]] /* Row 3 */);

?M([ [2,2,2,2], [1,1,2,2] ]);
\endcode

produces the output

\code
M = (| 1 2 3|, | 4 5 6|, | 7 8 9|)
Constant = [(| 1 2 3|), (| 7 8 9|)]
Constant = [(| 5 6|, | 8 9|), (| 1 2|, | 4 5|)]
\endcode

Of course, you can also mix lists. For example, the script

\code
?M = Matrix( [[1,2,3], [4,5,6], [7,8,9]] );

?M([ [1],		/* Row 1 */
	 [2,3],		/* Element Row 2, Col. 3 */
	 [1,2,3,1]] /* Second column */
	 );
\endcode

results in

\code
M = (| 1 2 3|, | 4 5 6|, | 7 8 9|)
Constant = [(| 1 2 3|), 6, (| 2|, | 5|, | 8|)]
\endcode


<hr>
\section sec_MatrixPointOperators Point Operators and Matrices

In section \ref subsec_Operators so called point operators were introduced. In this section we will discuss their application with respect to matrices in some more detail. As always we will start with an example. The matrix product of two matrices is evaluated using the operator \c *. In some cases it is, however, useful to multiply two matrices element wise. This can be done with the point version of the product operator. Here is a code example.

\code
?M1 = Matrix( [[1,2], [3,4]] );
?M2 = Matrix( [[1,0], [0,1]] );

?M1 * M2;	// The matrix product
?M1 .* M2;  // The element wise product
\endcode

This produces the output

<b>M1</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>2</td></tr><tr><td>
3</td><td>4
</td></tr></table>
.<br></font><br><b>M2</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>0</td></tr><tr><td>
0</td><td>1
</td></tr></table>
.<br></font><br><b>Constant</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>2</td></tr><tr><td>
3</td><td>4
</td></tr></table>
.<br></font><br><b>Constant</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>0</td></tr><tr><td>
0</td><td>4
</td></tr></table>
.<br></font><br>

Note that there is a special behaviour for the point operators <tt>.*</tt> and <tt>./</tt> when the RHS matrix consists of a single column. In that case, the value of the RHS matrix in row \c i is applied to all elements in the same row of the LHS matrix. Here is an example.

\code

?M1 = Matrix( [[1,2], [3,4]] );
?M2 = Matrix( [1,2] );

?M1 .* M2;
?M1 ./ M2;
\endcode

This produces the output

<b>M1</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>2</td></tr><tr><td>
3</td><td>4
</td></tr></table>
.<br></font><br><b>M2</b> <font size="12"><i>(2x1)</i></font> = <font size="12"><table><tr><td>
1</td></tr><tr><td>
2
</td></tr></table>
.<br></font><br><b>Constant</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>2</td></tr><tr><td>
6</td><td>8
</td></tr></table>
.<br></font><br><b>Constant</b> <font size="12"><i>(2x2)</i></font> = <font size="12"><table><tr><td>
1</td><td>2</td></tr><tr><td>
1.5</td><td>2
</td></tr></table>
.<br></font><br>


The other point operators have the same element wise behaviour. Note that the point operators <tt>.+</tt> and <tt>.-</tt> are equivalent to \c + and \c - when applied to matrices. The only other point operators that are useful for matrices are logic point operators, which will be discussed in the next section.


<hr>
\section sec_MatrixLogic Logic Operations

New in CLUScript v2.0 is the possibility to apply logic operators like <tt>!!</tt> and <tt>\></tt> to matrices. The standard logic operators are <tt>\></tt>, <tt>\<</tt>, <tt>\>=</tt>, <tt>\<=</tt>, <tt>==</tt>, <tt>!=</tt>. All of these can be applied between a matrix on the LHS and a scalar value on the RHS. The operators <tt>==</tt> and <tt>!=</tt> can also be applied between two matrices. If a logic operator is applied between a matrix and a scalar, it is applied to each element of the matrix and the result of the logic operation is written into a new matrix. For example,

\code
?M = Matrix( [[1,2], [3,4]] );
?M > 2;
?M < 2;
?M == 2;
?M != 2;
\endcode

gives

\code
M = (| 1 2|, | 3 4|)
Constant = (| 0 0|, | 1 1|)
Constant = (| 1 0|, | 0 0|)
Constant = (| 0 1|, | 0 0|)
Constant = (| 1 0|, | 1 1|)
\endcode

The matrices that are returned from such a logic operation can be used to find the positions in a matrix where a logic condition is true. This is done with the function argtrue(), which returns all those positions of a matrix where the entries are not zero. For example,

\code
?M = Matrix( [[1,2], [3,4]] );
?T = M > 2;
?argtrue(T);
\endcode

gives

\code
M = (| 1 2|, | 3 4|)
T = (| 0 0|, | 1 1|)
Constant = [[2, 1], [2, 2]]
\endcode

We can then also extract just those values where a condition was true, since argtrue() returns an index list.

\code
?M = Matrix( [[1,2], [3,4]] );
?M(argtrue(M > 2));
\endcode

gives

\code
M = (| 1 2|, | 3 4|)
Constant = [3, 4]
\endcode

More complex logical conditions can be evaluated using the logic point operators <tt>.==</tt>, <tt>.!=</tt>, <tt>.\<</tt>, <tt>.\></tt>, <tt>.\<=</tt>, <tt>.\>=</tt>, <tt>.&&</tt>,<tt>.||</tt>, and the logic operator <tt>!!</tt>. These point operators are applied between two matrices and evaluate their respective logic operation element wise. For example, suppose you are interested in those elements of a matrix that are greater than 2 and smaller or equal than 5. This can be evaluated as follows.

\code
?M = Matrix( [[1,2,3], [4,5,6], [7,8,9]] );
? M > 2 .&& M <= 5;
\endcode

gives

\code
M = (| 1 2 3|, | 4 5 6|, | 7 8 9|)
Constant = (| 0 0 1|, | 1 1 0|, | 0 0 0|)
\endcode

Note that the operator <tt>!!</tt> is applied element wise to matrices, whereby zero elements are set to unity, and all other elements are set to zero.




<hr>
\section sec_MatrixPrint Printing Matrices

When you are working with large matrices, it can be quite helpful to print them as a whole. This is currently not possible in the output window. However, you can print a matrix in the visualization window using the Latex() and DrawLatex() functions. The function Latex() translates a matrix into a latex string, and the function DrawLatex() can draw that string using latex. Here is an example,

\code
	X = VecP3(1,2,3);
	M = GetMVProductMatrix(X, MVOP_GEO);

	// Start an overlay in order to draw the matrix
	// indepedently of the rotation and translation
	// of the frame.
	StartOverlay();
	:White;
	SetLatexAlign(0,1);	// Top align latex drawing
	SetLatexMagStep(5);	// Set size of latex font
	DrawLatex(5, 5, 0, "$" + Latex(M) + "$", "mat");
	EndOverlay();
\endcode

which produces the following visualization

\image html MatrixDrawEx1.jpg

Do not forget to force the rendering of latex when parsing this file by pressing <b>ctrl + shift + p</b>.



<hr>
\section sec_MatrixExamples Examples

The singular value decomposition of a matrix has been implemented through the function <tt>SVD</tt>. This function expects a single parameter \f$M\f$, say, which is a matrix. It returns a variable list of three matrices in the order \f$U\f$, \f$D\f$, \f$V\f$, such that \f$M = UDV^T\f$ and \f$UU^T = VV^T = I\f$. The columns of the three matrices \f$U\f$, \f$D\f$, \f$V\f$ are ordered such that the elements of \f$D\f$ are given in ascending order. The following example script can be found under <tt>MatrixSVD.clu</tt><tt>.

\code
	// Create matrix
	?M = Matrix( [[1,2], [3,4]] );

	// Find SVD
	List = SVD(M);

	// Print Matrices
	?U = List(1);
	D = List(2);
	?V = List(3);

	// Print diagonal
	?Diag = [D(1,1), D(2,2)];

	// Did it work?
	?U * D * ~V;
	?U * ~U;
	?V * ~V;
\endcode

The eigenvalues and eigenvectors of a matrix can be evaluated with the function Eigen(). If you are only interested in the eigenvalues of a matrix, you can use the faster function EigenValues(). Internally both functions use LAPACK functions for the evaluation of eigenvectors and eigenvalues. Since in CLUScript complex numbers can not be represented, the real and imaginary parts of the eigenvalues and -vectors are returned separately in a list. Here is an example.

\code
	M = Matrix( [[1,2], [2,3]] );

	// List of eigenvalues and eigenvectors
	?E = Eigen(M); 

	?Eval = E(1);	// Real part of eigenvalues
	?Evec = E(3);	// Real part of eigenvectors

	// Eigenvectors are normalized, which
	// is checked in the following line.
	?Evec * ~Evec;

	// Check whether eigenvectors and 
	// eigenvalues were calculated correctly.
	// The next two lines should return the 
	// same matrix
	?M * Evec;
	?Evec * Row2Diag(Eval);
\endcode

which returns

\code
E = [(| -0.236068 4.236068|), (| 0 0|), (| -0.850651 -0.525731|, | 0.525731 -0.850651|), (| 0 0|, | 0 0|)]
Eval = (| -0.236068 4.236068|)
Evec = (| -0.850651 -0.525731|, | 0.525731 -0.850651|)
Constant = (| 1 0|, | 0 1|)
Constant = (| 0.200811 -2.227033|, | -0.124108 -3.603415|)
Constant = (| 0.200811 -2.227033|, | -0.124108 -3.603415|)
\endcode


The range of \f$3\times 3\f$ matrices can also be visualized. The visualization routine performs a singular value decomposition on the matrix and then draws the subspace spanned by those vectors in the \f$V\f$ matrix that have a non-zero corresponding singular value. To visualize a \f$3\times 3\f$ matrix simply use the colon operator. For example,

\code
 
M = Matrix( [[1,2,3], [1,2,4], [2,4,6]] );
:M :Yellow;
\endcode



**/
