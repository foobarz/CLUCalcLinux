/** \page page_ChangeLog Change Log

In the following the changes to CLUScript from one version to the next are presented. This should help you to get an overview of what is really new in a new version.

Jump to the change log of
<ul>
	<li>\ref sec_CL2_3 "Version 2.2 to 2.3"
	<li>\ref sec_CL2_2 "Version 2.1 to 2.2"
	<li>\ref sec_CL2_1 "Version 2.0 to 2.1"
	<li>\ref sec_CL2_0 "Version 1.5 to 2.0"
	<li>\ref sec_CL1_5 "Version 1.4 to 1.5"
	<li>\ref sec_CL1_4 "Version 1.3 to 1.4"
	<li>\ref sec_CL1_3 "Version 1.2 to 1.3"
	<li>\ref sec_CL1_2 "Version 1.1 to 1.2"
	<li>\ref sec_CL1_1 "Version 1.0 to 1.1"
</ul>


<hr>



\section sec_CL2_3 Version 2.3

<ul>
	<li>\ref subsec_CL2_3_AddedFunctionality
	<li>\ref subsec_CL2_3_AddedFunc
	<li>\ref subsec_CL2_3_AddedVar
	<li>\ref subsec_CL2_3_DeprecatedFunc
</ul>

The most important changes in this release are:
<ul>
	<li>You can read XML files with ReadXML().
	<li>List() can now split a string into a list of substrings given a delimiter string.
	<li>Strings can contain control symbols, like a new line '\\n'.
</ul>


\subsection subsec_CL2_3_AddedFunctionality Added/Changed Functionality

The following functionality has been changed or added:
<ul>
	<li>Strings may now also contain control symbols for new line ('\\n'), tabulator ('\\t') and the backslash itself ('\\\\'). This is in line with the syntax of generating a quotation mark in a string via '\\"'. Make sure to check your old CLUScripts, where you wrote latex code. The backslash symbols need to be doubled now!
	<li>Scalar() now accepts lists of elements. It is then applied to each element separately.
	<li>List() now accepts a string and a delimiter symbol string, whereby the string is split into a list of substrings separated by the delimiter symbol.
	<li>Function name Str() is obsolete and replaced by String(), which now also allows you to automatically concatenate the elements of a list with delimiter symbols. 
</ul>


\subsection subsec_CL2_3_AddedFunc Added Functions

This is a list of functions that have been added:
<ul>
	<li>ReadXML() allows you to read arbitrary XML files, which are represented in CLUCalc as nested lists.
	<li>ReadText(), reads a text file and stores it in a string variable.
	<li>WriteText(), writes a string to a text file.
</ul>

\subsection subsec_CL2_3_AddedVar Added Variables

Pre-defined variables added are:
<ul>
	<li>None.
</ul>


\subsection subsec_CL2_3_DeprecatedFunc Deprecated Functions

<ul>
	<li>Function name Str() is obsolete and replaced by String().
</ul>






<hr>

\section sec_CL2_2 Version 2.2

<ul>
	<li>\ref subsec_CL2_2_AddedFunctionality
	<li>\ref subsec_CL2_2_AddedFunc
	<li>\ref subsec_CL2_2_AddedVar
	<li>\ref subsec_CL2_2_DeprecatedFunc
</ul>

The most important changes in this release are:
<ul>
	<li>Read and write images of 'png', 'jpg', 'bmp' and other formats, and use them for 
		<b>texture mapping</b> standard geometric objects and arbitrary surfaces.
		
	<li>Work directly with the image of rendered latex code, for example for 
		texture mapping.
		
	<li>New variable type 'Tensor', which supports arbitrary dimensional tensor (limited by available memory) and allows for <b>automatic contraction</b> of tensors in products. Additionally, functions that generate algebra product tensors are available, which allows you to represent virtually all algebra operations as tensor products. See \ref page_WorkWithTensors for a detailed description.
	
	<li>It is now possible to read from and write to a serial port, which allows you to control peripheral hardware. Currently this is only implemented under Windows. See \ref page_SerialPort for more details.
	
	<li>You can now assign to a list. For example, the code [U,D,V] = SVD(M), sets variables U, D and V to the resultant matrices returned from SVD(). See \ref subsec_VarLists for more details.
</ul>


\subsection subsec_CL2_2_AddedFunctionality Added/Changed Functionality

The following functionality has been changed or added:
<ul>
	<li>Twists are now visualized. That is, if T is a translator and R a rotor in conformal space, then objects of the type T*R or R*T are now visualized properly.
	
	<li>AnalyzeMV() can now also be applied to twists.
	
	<li>Operators <code>==</code> and <code>!=</code> are now defined between image and color. They return an image with white pixels where the condition is true and black pixels where it is not true.
	
	<li>SetTextPrec() allows the displayed precision of numbers to be set between 0 and 17 digits. This number now refers to the number of significant digits.
	
	<li>New variable type <code>tensor</code>. Encodes tensors of arbitrary dimension. The standard operators have been extended to apply to variables of this type. See \ref page_WorkWithTensors for a detailed description.
	
	<li>Tensor and List variables are cast automatically to Matrix variables in functions SVD(), Eigen(), EigenValues() and det().
	
	<li>Function StartView() now allows the view size to be given either as a percentage or as pixel values.
	
	<li>Function DirVecP3() now also accepts variable lists, multivectors and mouse modes as parameters.
	
	<li>Passing a single list to a pre-defined function is like passing the elements of the list separately. For example, <code>VecE3([1,2,3])</code> is equivalent to <code>VecE3(1,2,3)</code>.
	
	<li>Can now also scale color variables with scalars.
	
	<li>Function Color() now casts vectors that represent points to color space.
	
	<li>Can now specify a texture coordinate function in Plot(). This allows for user defined texture mapping.
	
	<li>Tool <code>Input()</code> now only returns a value when 'RETURN' is pressed.
	
	<li>Function atan() now also accepts two parameters Y and X and evaluates angle of vector (X, Y) to x-axis.
		
	<li>Operator <code>^^</code> evaluates power. That is, <code>x^^y</code> is equivalent to pow(x,y).
	
	<li>All tools now accept as last parameter a tool tip that appears when the mouse is placed over a tool.
</ul>


\subsection subsec_CL2_2_AddedFunc Added Functions

This is a list of functions that have been added:
<ul>
	<li>WriteImg() writes images in formats jpg, png, bmp, tiff, ico, eps (wrapped jpeg).
	
	<li>ReadVar(), WriteVar() can be used to read and write variables. Variables are stored in a XML file. This also allows variable lists and vertex lists to be stored. 
	
	<li>ResizeImg(), ReshapeImg() for resizing and reshaping images.
	
	<li>CopyImg() generates a copy of an image. Note that the operator <code>=</code> only copies a reference to an image.
	
	<li>InsertImg() inserts an image into another one. Can also specify a channel map.
	
	<li>SetTexture() sets the current texture image.
	
	<li>SetTextureRepeat() sets the repetition factor of a texture.
	
	<li>EnableAbsTexCoords() enables/disables the use of absolute texture coordinates. When enables, the size of an object influences the texture repetition.
	
	<li>GetLatexImg() returns the image object of a rendered latex text. This image may then be used for texture mapping. 
	
	<li>SetArrowShape() sets the shape of arrows as length and opening angle of arrow tip.
	
	<li>SetMouseMode(), GetMouseMode() set and get the current mouse mode.
	
	<li>SetMouseValue(), GetMouseValue() set and get mouse values for different mouse modes.
	
	<li>SetMouseSens(), GetMouseSens() set and get the current mouse sensitivity.
	
	<li>SetVisWinSize() sets the size of the visualization window.
	
	<li>DrawIcosahedron() draws an icosahedron.
	
	<li>EnableFog(), SetFogDensity(), SetFogColor() implement OpenGL fog functionality.
	
	<li>Tensor() creates a tensor variable.
	
	<li>GAOpTensor() creates a tensor representing a GA operator.
	
	<li>MV2Tensor(), Tensor2MV() transform multivectors into tensors and vice versa.
	
	<li>GetLineWidth(), GetPointSize() get the current line width and point size.
	
	<li>EnableAnimate() replaces <code>_DoAnimate = [0 | 1]</code>.
	
	<li>SetAnimateTimeStep() sets time step between animation executions in milliseconds.
	
	<li>GetTime() returns the current system time in millisecond precision.
	
	<li>ResetLight() resets all lighting settings.
	
	<li>Sym2Col(), Col2Sym() transform the upper triangular part including the diagonal of a symmetric matrix into a column vector and vice versa.
	
	<li>List() creates a list of given size.
	
	<li>InsList() inserts elements into a list.
	
	<li>TransList() transposes the elements in a list. This can also be used to transform index lists into lists of numbers.
	
	<li>sign() gives the sign of a scalar value.
	
	<li>sort() sorts variable lists. Can also sort according to user defined function.
	
	<li>InputText() creates tool for text input by user.
	
	<li>Stepper() creates a tool that returns a single scalar value and offers buttons to increase and decrease the value in two different step sizes.
	
	<li>OpenSP(), ReadSP(), WriteSP() open, read from and write to a serial port. Currently only implemented under Windows.
</ul>

\subsection subsec_CL2_2_AddedVar Added Variables

Pre-defined variables added are:
<ul>
	<li>#MVOP_REVERSE, #MVOP_INVOLUTE multivector operation IDs, for the reverse and main incolution, as, for example, used by GAOpTensor().
	
	<li>#GA_E3, #GA_P3, #GA_N3, #GA_C2, geometric algebra IDs for different spaces.
	
	<li>#VERSION contains current CLUCalc version.
	
	<li>#true, #false are defined as 1 and 0.
</ul>


\subsection subsec_CL2_2_DeprecatedFunc Deprecated Functions

None, I believe.










<hr>


\section sec_CL2_1 Version 2.1

<ul>
	<li>\ref subsec_CL2_1_AddedFunctionality
	<li>\ref subsec_CL2_1_AddedFunc
	<li>\ref subsec_CL2_1_AddedVar
	<li>\ref subsec_CL2_1_DeprecatedFunc
</ul>

The most important changes in this release are:
<ul>
	<li>The Plot() function now draws point-, circle- and line-valued functions.
		
	<li>You can now use the functions SetInfoText() and SetInfoWidth() to print simple
		HTML text next to the visualization window. Also see \ref page_Info for more 
		details.
			
	<li>With the function DrawText() you can now draw simple text into the visualization
		without parsing it with LaTeX. 
</ul>


\subsection subsec_CL2_1_AddedFunctionality Added/Changed Functionality

The following functionality has been changed or added:
<ul>
	<li>The Plot() function now draws point-, circle- and line-valued 1D-functions, 
		as well as point-valued 2D-functions. You can also give a color function that
		defines the color of each point, circle or line. For 2D-functions you can also
		pass a normal function that gives the normal at each point, in order to improve
		the visualization. Furthermore, the normal vectors, whether they are automatically
		estimated or given, can be drawn on top of the surface.
		
	<li>MV2Matrix() now also accepts a list of multivectors, which generates a matrix whose columns reflect the separate multivectors.
	
	<li>floor() and ceil() now also accept multivectors, whereby they are applied to all components separately.
	
	<li>Matrices that consist of a single element are now automatically cast to scalars if necessary.
	
	<li>The operator '<code>==</code>' can now compare multivectors and scalars.
	
	<li>Point operators <code>.*</code> and <code>./</code> are extended to work row-wise between two matrices if the matrix on the RHS consists of a single column.
	
</ul>

\subsection subsec_CL2_1_AddedFunc Added Functions

This is a list of functions that have been added:
<ul>
	<li>You can now use the functions SetInfoText() and SetInfoWidth() to print simple
		HTML text next to the visualization window. Links in this text can be defined
		such that the script is reexecuted in execution mode #EM_LINK, everytime the user
		click on a link. This allows for tutorial scripts and better user interaction.
		The new introduction script ('Intro_4_1.clu') is an example of this.

	<li>With the function DrawText() you can now draw simple text into the visualization
		without parsing it with LaTeX. This allows you to display constantly changing text
		like the contents of a vector. Note that CLUCalc in version 4.1 also displays the
		script output text in simple HTML.

	<li>SetTextSize() sets the size of the text drawn with DrawText().
			
	<li>ReadMatrix() reads a text file of a particular format and stores the values in a matrix.
	
	<li>oprod() and iprod() evaluate the outer and inner product of the elements of a list, respectively.
	
	<li>sub() subtracts from the first element in a list all other elements. For matrices this works row-wise, by subtracting from the first element in each row all other elements in the row.
	
	<li>round() rounds scalars, all elements of lists, multivectors and matrices.
	
	<li>FindAllDegConics() finds all degenerate 2D-conics that can be constructed through the linear combination of two given conics.
	
	<li>SetEvalPrec() and SetVisPrec() set the numerical precision for evaluations and visualizations, respectively.
	
	<li>Scalar() transforms strings and other variables into scalars.

</ul>

\subsection subsec_CL2_1_AddedVar Added Variables

Execution mode variables added are:
<ul>
	<li>#EM_LINK. This execution mode is set when the user clicks on special links in either the info window or the output window. See \ref page_Info for more details.
	
	<li>#LinkData. This variable contains the data of a link clicked by the user in the info text window or the output window. See \ref page_Info for more details.
</ul>


\subsection subsec_CL2_1_DeprecatedFunc Deprecated Functions

None, I believe.


<hr>


\section sec_CL2_0 Version 2.0

<ul>
	<li>\ref subsec_CL2_0_AddedFunctionality
	<li>\ref subsec_CL2_0_AddedFunc
	<li>\ref subsec_CL2_0_AddedVar
	<li>\ref subsec_CL2_0_DeprecatedFunc
</ul>

A lot of things have been changed in CLUScript since the last version. In particular, <b>the syntax with respect to creating lists and selecting elements of a matrix or list are now different</b>. In short the use of square ('<b>[]</b>') and round ('<b>()</b>') brackets has been exchanged. This was necessary since the old syntax led to a number of problems when working with lists. However, it also means that <b>you will probably have to adapt the scripts you have written so far to the new syntax</b>.

Another important change in the parser is the reduced scope of variables. A variable defined in the main part of a script is not directly available in a macro defined within that script. In oder to access globally defined variables, you need to write '::' in front of the variable name. This is also true if you want to call a macro from within another macro, in which case you will have to write '::' in front of the name of the macro.

Not just the syntax was changed but also the internal working of the parser. For example, the parameters passed to macros in CLUScript are now passed by reference if possible. This allows you to write macros that simply change a parameter passed but need to give a return value. It is also possible to create a reference to a variable explicitly using the new operator <b>-></b>. For example, the script

\code
 
func = { b -> _P(1);  b = 2; }

?a = 1;
func(a);
?a;
\endcode
produces the output
\code
 
a = 1
a = 2
\endcode

Apart from the parser changes, many new functions and also a new Clifford algebra space were added to CLUScript. The new Clifford algebra space is the Clifford algebra over the vector space of symmetric 3 by 3 matrices. Such matrices can be used to represent conic sections and this is also how elements of that Clifford algebra are visualized. In particular, the outer product of five points represents the conic section through these five points (which is unique). Have a look at the function VecC2() for more details.

Here follows now a listing of all changes.

\subsection subsec_CL2_0_AddedFunctionality Added/Changed Functionality

The following functionality has been added.
<ul>
	<li>Colors can now be added and subtracted. There also exists now a new predefined variable called #Alpha. If you add this variable to another color variable, you obtain a transparent color.
	
	<li>When in 2d-view mode (see #_2dView), <code>VecX3([Mouse Mode])</code> creates a vector in the xy-plane and not the xz-plane as before. The X in VecX3 stands for E, P or N.

	<li>You can now read in images using the function ReadImg() and define image variables. If \c I is an image variable, then <code>I(x,y)</code> returns the pixel value at position <code>(x,y)</code> and <code>I(x,y,cx,cy)</code> extracts a region of the image.
	
	<li>The operator + and - are now also defined between a matrix and a scalar. In this case the scalar is added, respectively subtracted, from each element of the matrix.
	
	<li>An operator for the main involution has been defined. It is denoted by <tt>'</tt>. This operator ensures that the product of a blade with the involution of its reverse is always a positive scalar.
	
	<li>Functions abs(), pow(), exp(), sqrt(), sin(), cos(), tan(), asin(), acos() and atan() can now be applied to matrices and lists, whereby they act on each components seperately. The function sqrt() sets negative components to zero.
	
	<li>Variables in functions are only local. Access to global variables is possible by writing '::' in front of the variable name.
	
	<li>'<b>()</b>' is now used for function calls and to select elements of matrices, lists, multivectors etc.
	
	<li>'<b>[]</b>' is now used to create lists.
	
	<li>If \c L is a list, then <code>L("[name]")</code> allows you to create and select lists of a particularly useful structure. Here is an example,
	
	\code
	// An empty list
	L = []; 
	// Add an element with the name "color1"
	L("color1") = Red;
	// Add another element with the name "color2"
	L("color2") = Blue;
	
	?L;
	?L("color1");
	?L("color2");
	\endcode
	has the output
	\code
	L = [[color1, (1, 0, 0)], [color2, (0, 0, 1)]]
	Constant -> (1, 0, 0)
	Constant -> (0, 0, 1)
	\endcode


	<li>Variable lists and matrices can now be indexed by a variable list. For example,
\code
	// A nested list
	L = [1, [2, 3]];

	// Here are a couple of ways to extract
	// the elements of that list
	?L(2);
	?L(2)(1);
	?L([2,1]);
	?L([[2], [1]]);
	?L([[2,2], [1], [2], [1]]);
\endcode
	produces the output
\code
	Constant -> [2, 3]
	Constant -> 2
	Constant = 2
	Constant = [[2, 3], 1]
	Constant = [3, 1, [2, 3], 1]
\endcode

	Here is an example for a matrix.
\code
	// A matrix
	M = Matrix(
		[[1,2,3], 
		[4,5,6], 
		[7,8,9]]);

	// Get first row
	?M(1);
	// Get element in row 1 and col. 2
	?M(1,2);
	// Get 2x2 submatrix starting at (2, 2)
	?M(2, 2, 2, 2);
	// Get second column
	?M(1, 2, 3, 1);

	// Get a number of different things
	?M([ [[1], [3]], [1,2], [2,2,2,2], [1,2,3,1]]);
\endcode
	produces the output
\code
	Constant = (| 1 2 3|)
	Constant = 2
	Constant = (| 5 6|, | 8 9|)
	Constant = (| 2|, | 5|, | 8|)
	Constant = [[(| 1 2 3|), (| 7 8 9|)], 2, (| 5 6|, | 8 9|), (| 2|, | 5|, | 8|)]
\endcode

	<li>The '<b>()</b>' can now also be applied to strings. For example,
\code
	s = "www.Hello-World.de";
	
	?s(5);			// Get letter at position 5
	?s(5, 9);		// Get substring from position 5 till 9
	?s([5, 9]);		// This produces the same result
	?s("Hello");	// Get all positions of substring "Hello"
	?s(".");		// Get all positions of substring "."
	?"Hello"("l");	// This also works directly on a string
\endcode
	produces the output
\code
	H
	Hello
	Hello
	Constant = [5]
	Constant = [4, 16]
	Constant = [3, 4]
\endcode
	See also the example script <code>StringIdxTest1.clu</code>.
	
	<li>Can now apply the operator <code><<</code> to strings, which is (nearly) the same as the operator \c +. 

	<li>The function Matrix() now accepts a VecC2() vector, from which is creates the corresponding symmetric 3 by 3 matrix.
	
	<li>VecE3() now accepts also two parameters, in which case it creates a 3d-vector with the z-component set to zero.
	
	<li>VecP3() now accepts also two and four parameters. When two parameters are given it generates a 3d-homogeneous vector in the xy-plane. When four parameters are given, the fourth parameters sets the value for the homogeneous dimension.
	
	<li><code>VecXX()</code>, where <code>XX</code> stands for 'E3', 'P3', 'N3' or 'C2', now accepts index lists, in which case it generates a list of vectors. Here is an example
\code
	L = [
	[1], 		// Mouse Mode 1 vector
	[1,2], 		// vector (1,2,0)
	[1,1,1]		// vector (1,1,1)
	];
	
	?VecE3(L);
	?VecP3(L);
	?VecN3(L);

	?VecP3(1,2,3,-1);
	?VecC2([[2,1], VecE3(1,0,0)]);
\endcode
	produces the output
\code
	Constant = [[], [ 1^e1 + 2^e2 ], [ 1^e1 + 1^e2 + 1^e3 ]]
	Constant = [[ 1^e4 ], [ 1^e1 + 2^e2 + 1^e4 ], [ 1^e1 + 1^e2 + 1^e3 + 1^e4 ]]
	Constant = [[ -0.5^e+ + 0.5^e- ], [ 1^e1 + 2^e2 + 2^e+ + 3^e- ], [ 1^e1 + 1^e2 + 1^e3 + 1^e+ + 2^e- ]]
	Constant = 1^e1 + 2^e2 + 3^e3 + -1^e4
	Constant = [[ 2^e1 + 1^e2 + 0.707107^e3 + 2.828427^e4 + 0.707107^e5 + 2^e6 ], [ 1^e1 + 0.707107^e3 + 0.707107^e4 ]]
\endcode
	
	<li>Slider(). When initial value is changed by the script, then slider tool is set to new initial value. In this way, a slider can be moved from within a script.
	<li>TranslateFrame(). Can now also pass a vector to give translation of frame.
	
	<li>In conformal space now also lines at infinity (the intersection of two parallel planes), and imaginary point pairs at infinity (the intersection of a circle with a parallel plane) are visualized.
	
	<li>Operators <code>>, <, >=, <=, ==, !=, !!, &&, ||</code> are now also defined for a matrix on the LHS and a scalar on the RHS.  The result is a matrix of same dimension with 0 and 1 entries, giving the result of the respective logical operation applied between the separate matrix elements and the scalar. For example,
\code
	M = Matrix([[1,-1], [2,0]]);
	?M > 0;
	?M < 2;
	?!!M;
\endcode
	produces the output
\code
	Constant = (| 1 0|, | 1 0|)
	Constant = (| 1 1|, | 0 1|)
	Constant = (| 0 0|, | 0 1|)
\endcode
	See also the example script <code>MatrixLogic1.clu</code>.
	
	<li>'Point' operators have been introduced which act element-wise between two matrices or lists. There are arithmetic and logic point operators: <code>.+, .-, .*, ./, .., .^</code> and <code>.<, .>, .<=, .>=, .==, .!=, .&&, .||</code>. Furthermore, lists can be combined component-wise using the operator <code>.<<</code>. For example,
\code
	M1 = Matrix([[1,-1], [2,0]]);
	M2 = Matrix([[2,-1], [1,0]]);
	
	?M1 .== M2;
	?M1 .> M2;
	
	?[[1], [2]] .<< [[3], [4]];
\endcode
	produces the output
\code
	Constant = (| 0 1|, | 0 1|)
	Constant = (| 0 0|, | 1 0|)
	Constant = [[1, 3], [2, 4]]
\endcode
	
	<li>GetMVProductMatrix(). When a mask is given, null rows of the resulant matrix are removed.
	
	<li>SubList(). The syntax of this function changed.
</ul>



\subsection subsec_CL2_0_AddedFunc Added Functions

The following functions have been added.
<ul>
	<li>\ref grp_DrawFunc "Drawing Functions"
	<ul>
		<li>DrawBox(). Draws a box.	
		<li>DrawCylinder(). Draws a cylinder.	
		<li>DrawDisk(). Draws a partial disk (similar to DrawArc).
		<li>DrawLineSurface(). Draws the surface spanned by a set of lines (represented by multivectors).
		<li>PopFrame(). Pop a frame from a stack.
		<li>PushFrame(). Push the current frame to a stack.
		<li>RotateView(). This function rotates the current view.
		<li>TranslateView(). This function translates the current view.
	</ul>
	
	<li>\ref grp_ImageFunc "Image Functions"
	<ul>
		<li>GetImgCoords(). Get extent of image in current coordinates.
		<li>Img2Matrix(). Convert an image to a matrix.
		<li>Matrix2Img(). Convert a matrix to an image.
		<li>ReadImg(). Load an image.
		<li>SetImgPos(). Set the position of an image.
	</ul>
	
	<li>\ref grp_Matrix "Matrix Functions"
	<ul>
		<li>AddCols(). Add a number of columns to a matrix.
		<li>AddRows(). Add a number of rows to a matrix.
		<li>Eigen(). Evaluate eigenvalues and eigenvectors of a matrix. (Uses LAPACK functions)
		<li>EigenValues(). Evaluate eigenvalues of a matrix. (Uses LAPACK functions)
		<li>FindMainNRows(). Get a sorted list of N rows of a matrix, which mainly span the row space.
		<li>GetRows(). Construct a matrix from a set of rows of another matrix.
		<li>inv(). Invert components of matrix separately. Zero components are left zero.
		<li>ReshapeMatrix(). Change the form of a matrix while keeping the number of elements constant.
		<li>ResizeMatrix(). Change dimensions of matrix.
		<li>RowSpace(). Reduce matrix to those rows that span the row space and have highest magnitude.
	</ul>
		

	<li>\ref grp_GAFunc
	<ul>
		<li>AnalyzeMV(). Get geometric interpretation of multivector as text.
		<li>BladeIdxList(). Returns the indices of the basis blades that are contained in a multivector.
		<li>DefVarsC2(). Defines the basis vectors for the vector space of 2d-conics.
		<li>DegConic(). Makes a non-degenerate conic degenerate.
		<li>MV2Mask(). Generates a mask, for example for the function GetMVProductMatrix(), from the basis blades contained in a multivector.
		<li>ReflectorC2(). Generates a reflection operator for the space of 2d-conics.
		<li>RotorC2(). Generates a rotor for the space of 2d-conics.
		<li>VecC2(). Generates a vector that represents a point in the space of 2d-conics.
	</ul>


	<li>\ref grp_ToolFunc
	<ul>
		<li>Button(). Tool that simply displays a button but does not return any value.
		<li>Choice(). New tool that lets the user select an element from a list.
	</ul>
	
	<li>\ref grp_MathFunc
	<ul>
		<li>prod(). Evaluates the product of the elements of a list and the rows of matrices.
		<li>sum(). Sums lists and rows of matrices.
	</ul>

	<li>\ref grp_Misc
	<ul>
		<li>argmax(). Get index of matrix or list, where element with the maximum value is located.
		<li>argmin(). Get index of matrix or list, where element with the minimum value is located.
		<li>argtrue(). Get indices of matrix or list, where the elements are not equal to zero.
		<li>CombIdxList(). Generates an index list of all combinations of a set of numbers.
		<li>FileChooser(). Pops up a dialog box that lets the user choose a file.
		<li>PermIdxList(). Generates an index list of all permutations of a set of numbers.
		<li>RemList(). Remove a number of elements from a list.
		<li>SaveScreen(). Saves the current visualization to a bitmap file.
		<li>ShowFile(). Currently only works for Windows. Shows a file with the viewer defined by the operating system. This allows you to run videos or show web pages from within CLUCalc.
		<li>Size(). This function replaces the obsolete function Len(). It also gives the dimensions of matrices and images.
		<li>WriteData(). Write a list to a file.
	</ul>
	
</ul>


\subsection subsec_CL2_0_AddedVar Added Variables

The following variables have been added.
<ul>
	<li>#Alpha, #MAlpha, #DAlpha. Color variables that contain a negative alpha value. In this way a color can be made transparent by simply adding one of these variables to it.
	
	<li>#EM_KEYUP, #EM_KEYDOWN. Execution modes 'KEYUP' and 'KEYDOWN'. They occur when the user pressed and released a key, respectively. In this way, it is possible to control a script through the keyboard.
</ul>


\subsection subsec_CL2_0_DeprecatedFunc Deprecated Functions

<ul>
	<li>Len(). Use Size() instead.
	
	<li>Operator \c \# is no longer defined.
</ul>

<hr>



\section sec_CL1_5 Version 1.5

A few changes and additions have been made since version 1.4. Probably the most visible change is the new feature of defining tools. In this was custom made dialog boxes can be added to a visualization. Apart from this a number of bugs were fixed and the functionality of a number of functions was extended. See the following detailed list for more information.

\subsection subsec_CL1_5_AddedFunctionality Added Functionality

The following functionality has been added.
<ul>
	<li>\ref page_Tools You can now dynamically create tools with CLUScript, which are attached to the visualization window. This creates a kind of dialog box for even better user interactivity.
	<li>\ref anchor_JoinMeetNullBlades "Join and Meet" Join and meet now also work 		between null blades.
	<li>\ref anchor_AND_OR_Operator "Bitwise AND and OR" operators now exists.
	<li>\ref sec_SolveMV_VersorEqn An extension of the functionality of GetMVProductMatrix() now allows for the evaluation of versors (rotors, translators, etc.) from two sets of multivectors related by them.
</ul>


\subsection subsec_CL1_5_ChangedFunctionality   Changed Functionality

The following functionality has been changed.
<ul>
	<li>\ref page_Latex In order to render Latex you now need to have \b Ghostscript installed and \b not ImageMagick.
</ul>



\subsection subsec_CL1_5_AddedFunc Added Functions

The following functions have been added.
<ul>
	<li>\ref grp_GAFunc
	<ul>
		<li>SphereN3() This function now also takes a Euclidean, projective or conformal vector to define the sphere's center.
	</ul>

	<li>\ref grp_ToolFunc 
	<ul>
		<li>CheckBox()
		<li>Input()
		<li>Slider()
	</ul>
	
	<li>\ref grp_DrawFunc
	<ul>
		<li>DrawEllipse()
		<li>DrawSphere()
	</ul>
	
	<li>\ref grp_Misc
	<ul>
		<li>SubList() This function extracts a sublist from a given list.
	</ul>
	
</ul>


\subsection subsec_CL1_5_AddedVar Added Variables

The following variables have been added.
<ul>
	<li>\ref grp_VarMVStyle
	<ul>
		<li>#DRAW_POINT_AS_DOT Points are drawn as dots (default).
		<li>#DRAW_POINT_AS_SPHERE Points are drawn as small spheres.
	</ul>
	
	<li>\ref grp_VarMisc
	<ul>
		<li>#EM_TOOL (#ExecMode \& #EM_TOOL) is non-zero if script is executed due to change of tool.
		<li>#ToolName Name of tool that caused execution of script.
	</ul>
</ul>


\subsection subsec_CL1_5_DeprecatedFunc Deprecated Functions

<ul>
	<li>DiagToRow() is now called Diag2Row().
	<li>RowToDiag() is now called Row2Diag().
</ul>

<hr>



\section sec_CL1_4 Version 1.4

There have been many additions to CLUScript. It is now, for example, possible to prepare \ref page_Presentation "presentations", annotate your visualizations with \ref grp_LatexFunc "LaTeX" text, affect the \ref grp_LightFunc "lighting", do \ref page_ErrProp "error propagation" in Clifford algebra and to draw 2d-functions (DrawPointSurface()) and also circle-valued functions (DrawCircleSurface()). Another nice extension is that you can now create purely 2d visualizations (see #_2dView). Here are the details of all changes.


\subsection subsec_CL1_4_AddedFunctionality Added Functionality

The following functionality has been added.
<ul>
	<li>\ref subsec_StructProg "Structured programming" with <tt>if</tt>-clauses and loops.
	<li>\ref page_Presentation "Presentation" support.
	<li>\ref grp_LatexFunc "LaTeX" text rendering.
	<li>\ref page_SolveMVEqns "Multivector equation" solving.
	<li>\ref page_ErrProp "Error propagation" in Clifford algebra operations.
	<li>\ref grp_VarMVStyle "Visualization styles" for Euclidean space.
	<li>\ref grp_LightFunc "Lighting" of scenes can now be influenced.
	<li>\ref grp_ImageFunc "Images" can now be loaded from disk and displayed.
	<li>\ref grp_DrawFunc "Drawing functions" have been extended to now include things like drawing point surfaces DrawPointSurface()) and circle surfaces (DrawCircleSurface()).
</ul>

\subsection subsec_CL1_4_AddedFunc Added Functions

The following functions have been added.
<ul>
	<li>\ref grp_DrawFunc "Drawing Functions"
	<ul>
		<li>AddFrameOrigin()
		<li>AddFrameRotor()
		<li>DrawArc()
		<li>DrawArrow()
		<li>DrawCircle()
		<li>DrawCircleSurface()
		<li>DrawCone()
		<li>DrawPointGrid()
		<li>DrawPointList()
		<li>DrawPointSurface()
		<li>DrawTriangle()
		<li>EnableSmoothLine()
		<li>EnableSmoothPoint()
		<li>EndOverlay()
		<li>RotateFrame()
		<li>SetFrameOrigin()
		<li>SetFrameRotor()
		<li>SetLineWidth()
		<li>SetPointSize()
		<li>StartOverlay()
		<li>TranslateFrame()
	</ul>
	
	<li>\ref grp_ErrPropFunc "Error Propagation Functions"
	<ul>
		<li>EPOp()
	</ul>
	
	<li>\ref grp_ImageFunc "Image Functions"
	<ul>
		<li>DrawImg()
		<li>EnableImgTransparency()
		<li>SetImgAlign()
		<li>SetImgScale()
		<li>SetImgTransparentColor()
	</ul>
	
	<li>\ref grp_LatexFunc "LaTeX Rendering Functions"
	<ul>
		<li>EnableRenderLatex()
		<li>DrawLatex()
		<li>Latex()
		<li>SetLatexAlign()
		<li>SetLatexMagStep()
	</ul>
	
	<li>\ref grp_LightFunc "Lighting Functions"
	<ul>
		<li>EnableLight()
		<li>EnableLightFixed()
		<li>SetAmbientLight()
		<li>SetLightAmbientCol()
		<li>SetLightAttenuation()
		<li>SetLightDiffuseCol()
		<li>SetLightSpecularCol()
		<li>SetLightPos()
		<li>SetLightSpotCutOff()
		<li>SetLightSpotDir()
		<li>SetLightSpotExp()
	</ul>
	
	<li>\ref grp_Matrix "Matrix Functions"
	<ul>
		<li>DiagToRow()
		<li>GetMVProductMatrix()
		<li>IdMatrix()
		<li>Matrix2MV()
		<li>MV2Matrix()
		<li>RowToDiag()
	</ul>
	
	<li>\ref grp_Misc
	<ul>
		<li>ReadData()
		<li>SetTextPrec()
	</ul>
	
	<li>\ref grp_PresentationFunc
	<ul>
		<li>_ClearScriptList()
		<li>_AddScriptToList()
	</ul>
	
	<li>\ref grp_RanFunc
	<ul>
		<li>Gauss()
		<li>Ran()
		<li>SetGaussPars()
		<li>SetRanSeed()
	</ul>
</ul>


\subsection subsec_CL1_4_AddedVar Added Variables

The following variables have been added.
<ul>
	<li>\ref grp_ColVars
	<ul>
		<li>#MWhite
		<li>#DWhite
	</ul>

	<li>\ref grp_VarEnv
	<ul>
		<li>#_2dView
	</ul>
	
	<li>\ref grp_VarMVStyle
	<ul>
		<li>#IPNS
		<li>#OPNS
		<li>#E3_DRAW_PLANE_AS_DISK
		<li>#E3_DRAW_PLANE_AS_RECT
		<li>#E3_DRAW_VEC_AS_ARROW
		<li>#E3_DRAW_VEC_AS_LINE
		<li>#E3_DRAW_VEC_AS_POINT
	</ul>
	
	<li>\ref grp_VarMisc
	<ul>
		<li>#MVOP_ADD
		<li>#MVOP_GEO
		<li>#MVOP_INNER
		<li>#MVOP_OUTER
		<li>#MVOP_SUB
		<li>#ExecMode
		<li>#EM_ANIMATE
		<li>#EM_CHANGE
		<li>#EM_NEW
		<li>#EM_USER
	</ul>
</ul>


\subsection subsec_CL1_4_DeprecatedFunc Deprecated Functions

The following functions do not exist any more.
<ul>
	<li>Repeat()
</ul>


\section sec_CL1_3 Version 1.3

A number of features have been added between version 1.2 and 1.3. 

\subsection subsec_CL1_3_AddedFunc Added Functions

<ul>
<li> DrawPoint(): Draws a point directly at given coordinates.
<li> DrawLine(): Draws a line directly between given end point coordinates.
<li> DrawPlane(): Draws a plane at given offset and with given basis.
</ul>

\subsection subsec_CL1_3_AddedVar Added Variables

<ul>
<li> #_FrameBoxSize: This variable controls the size of the frame box always shown. Setting this variable to a value smaller or equal to zero, removes the frame box from the visualization.

<li> #_BGColor: This variable controls the background color of the visualization. You need to parse the script twice for this variable to take effect.

<li> #N3_SHOW_IMAG: For conformal objects allows visualization of imaginary objects, like circles and spheres with imaginary radius.

<li> #N3_HIDE_IMAG: Switches to visualization mode where imaginary objects are not shown. 
</ul>

\subsection subsec_CL1_3_AddedFunctionality Added Functionality

<ul>
<li> The visualization of objects in conformal space was improved.
<li> Spheres, Circles and Point Pairs with imaginary radius can now be visualized. They are drawn either as transparent objects or as dotted line objects.
<li> The function Color() now accepts 3 or 4 parameters, whereby the fourth parameter gives the value of translucency. A value of 1 is a completely opaque object and a value of zero a completely transparent object.
</ul>

\section sec_CL1_2 Version 1.2

Only two features have been added between version 1.1 and 1.2. 

\subsection subsec_CL1_2_AddedFunc Added Functions

<ul>
<li> Repeat(): This function basically implements a <tt>for</tt>-loop. It repeats some code a given number of times.
</ul>


\subsection subsec_CL1_2_AddedVar Added Variables

<ul>
<li> None.
</ul>


\subsection subsec_CL1_2_AddedFunctionalizy Added Functionality

<ul>
<li> You can now define macros, which encapsulate a portion of code. This facilitates the repeated execution of complex operations.
</ul>


\section sec_CL1_1 Version 1.1

There hasn't been much time between versions 1.0 and 1.1 but quite a number of features have been added. There have been no changes to the syntax, but a number of additional functions have been introduced and the functionality of some operators has been extended. In the following these changes are listed.

\attention
All angles are now given in radians and \emph{not} in degrees as in version 1.0. However, an additional variable \typ{RadPerDeg} has been introduced which gives the ratio of radians per degree.

\subsection subsec_CL1_1_AddedFunc Added Functions

<ul>
<li> exp(): exponential of scalars and multivectors.
<li> log(): natural logarithm of scalars.
<li> proj(): projection of blades.
<li> rej(): rejection of blades.
<li> GradeList(): list of grades contained in multivector.
<li> Len(): number of elements in string, list or vertex list.
<li> Str(): conversion of element in string.
<li> Type(): get type of variable.
<li> Plot(): plot 1D-parametric vector function.
<li> Color(): create color.
</ul>


\subsection subsec_CL1_1_AddedVars Added Variables

<ul>
<li> #RadPerDeg: ratio \f$\pi/180\f$ to convert degrees into radians and vice versa.
</ul>


\subsection subsec_CL1_1_AddedFunctionalizy Added Functionality

<ul>
<li> All angles are now given in radians. Use the variable #RadPerDeg to convert radians into degrees.
<li> A new variable type <b>vertexlist</b> has been added which typically contains the result of a function plot.
<li> The functionality of the operator <tt>\#</tt> has been extended.
</ul>


**/
