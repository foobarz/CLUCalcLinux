/** \page page_SolveMVEqns Solving Multivector Equations

On this page, various aspects of solving multivector equations are discussed. So far, only linear equations can be solved. The method used is fairly simply but quite powerful at the same time. For more details than can be presented here, see the technical report <em>"Aspects of Clifford Algebra in Euclidean, Projective and Conformal Space"</em> by C. Perwass and D. Hildenbrand, which can be downloaded from the
<a target="_blank" href="http://www.ks.informatik.uni-kiel.de/modules.php/name+Mitarbeiter,func+hp,mid+7">Cognitive Systems Group Kiel</a> webpage.
The following text is structured as follows.

<ol>
	<li> \ref sec_SolveMV_Intro
	<li> \ref sec_SolveMV_LinEqn
	<li> \ref sec_SolveMV_VersorEqn
</ol>

<hr>

\section sec_SolveMV_Intro Introduction

To explain how this works, I need to introduce some maths. The Clifford algebra over an n-dimensional vector space has dimension \f$2^n\f$. Hence, the algebra has a \f$2^n\f$-dimensional basis. If we denote the basis vectors by \f$\{E_i\}_{i=1}^{2^n}\f$, then a general multivector can be expressed as 
\f[
A = \sum_{i=1}^{2^n}\;\alpha^i\, E_i,
\f]
where the \f$\{\alpha^i\}\f$ are scalar components. The geometric, inner and outer products between multivectors are basically bilinear functions that can be written as follows.
\f[
A\circ B = \sum_{k=1}^{2^n}\,\sum_{i=1}^{2^n}\,\sum_{j=1}^{2^n}\; 
\alpha^i\,\beta^j\; {g^k}_{ij}\,E_k,
\f]
where \f$\circ\f$ stands for any bilinear product in Clifford algebra and \f${g^k}_{ij}\f$ is a 3-valence tensor whose entries are either minus one, zero or one. This tensor encodes the particular bilinear product. 

What the function <tt>GetMVProductMatrix</tt> does is, given a multivector \f$A\f$ and a particular product, to evaluate the matrix
\f[
{h^k}_j = \sum_{i=1}^{2^n}\;\alpha^i\,{g^k}_{ij},
\f]
where the \f$\{\alpha^i\}\f$ are the components of the multivector \f$A\f$. The idea is that this allows you to solve multivector equations like \f$A\,\circ\,X = B\f$ for \f$X\f$. This becomes clear when we write down this equation in terms of components.
\f[
\sum_{i=1}^{2^n}\,\sum_{j=1}^{2^n}\; \alpha^i\,\xi^j\; {g^k}_{ij} = \beta^k\quad \forall\,k.
\f]
If we write this as
\f[
\sum_{j=1}^{2^n}\; \xi^j\; {h^k}_{j} = \beta^k\quad \forall\,k,
\f]
where \f${h^k}_j\f$ is defined as above, then this is a simple matrix equation which can be solved by inverting the matrix \f${h^k}_j\f$. Note that if the multivector \f$B\f$ in this example were simply the scalar 1, then this method gives you the inverse of the multivector \f$A\f$.


\section sec_SolveMV_LinEqn Solving Linear Equations

Note that in general multivectors are not invertible. Furthermore, if you are looking for solutions of \f$X\f$ in an equation of the form \f$A\,X = 0\f$, the solution will in general not be unique. The are two things you can do to enforce uniqueness. First of all you can use a number of concurrent equations that \f$X\f$ has to satisfy. This may be done with the second form of <tt>GetMVProductMatrix</tt>, where instead of a single multivector, you give a list of multivectors. For each multivector a matrix of the form of \f${h^k}_j\f$ is then evaluated and all those matrices are stacked on top of each other.

Another way to enforce uniqueness of a solution is to look for solutions of a multivector equation in a certain subspace of the algebra. This can be done with the \a Mask parameter. With the mask parameter you can set which algebra dimensions should be used in the generation of the matrix \f${h^k}_j\f$. This is best explained with an example. Suppose you want to find all those multivectors \f$X\f$ that satisfy the equation \f$e_1\cdot X = 0\f$ in Euclidean space, i.e. the null space of \f$e_1\f$.

\code
// Define the basis variables for Euclidean space
DefVarsE3();

// Define a multivector variable as e1
A = e1;

// Generate the multivector product matrix of A
// for the inner product
MA = GetMVProductMatrix(A, MVOP_INNER);

// Find the null space of MA with a 
// singular value decomposition
W = SVD(MA);

// Transform the diagonal matrix of the
// singular values to a row vector and
// display it
?Diag = DiagToRow(W(2));
\endcode

The output generated by this script is the following.
\code
Diag = (| 0 0 0 0 1 1 1 1|)
\endcode

Since there are four singular values that are zero, the null space of <tt>MA</tt> is four-dimensional. The basis multivectors of this null space are first four columns of the matrix <tt>W[3]</tt> that was returned from the SVD. These column vectors can be transformed back into actual multivectors with the function <tt>Matrix2MV</tt>.  The following piece of code has to be appended to the above code.

\code
// Transform the singular vectors to multivectors
V = Matrix2MV(W(3));

// Print the first four (singular) multivector which
// span the basis of the null space of e1 
// w.r.t. the inner product.
?V(1);
?V(2);
?V(3);
?V(4);

// Test the caluculation by evaluating the
// inner product with all singular multivectors.
?A . V;
\endcode

This produces the following output.
\code
Constant = -1^e23
Constant = 1
Constant = -1^e3
Constant = 1^e2
Constant = ([], [], [], [], [ -1 ], [ -1^e3 ], [ -1^e23 ], [ -1^e2 ])
\endcode

This show that the algebraic basis that spans the null space of \f$e_1\f$ w.r.t. the inner product is given by \f$\{1,\,e_2,\, e_3,\,e_2\wedge e_3\}\f$. 

We see that this solution is not unique. But, suppose we were only interested in the \b bivectors that lie in the null space of \f$e_1\f$ w.r.t. the inner product. This can be evaluated directly by using the mask parameter of <tt>GetMVProductMatrix</tt>. The length of the mask list passed to this function must be the same as the algebra dimensions. For example, for Euclidean space the mask list must have 8 entries, and for projective space it must have 16 entries. Each entry in a mask list stands for an algebra dimension. If an entry in the mask list is zero, then the respective algebra dimension will be neglected. The non-zero entries of the mask must have entries counting up from 1 to the number of dimensions the solution space has. However, two or more entries in the mask can also have the same integer number. This expresses the fact that these dimensions should have the same scalar factor in the solution space. This is again best explained by using the above example. The following code only evaluates bivector solutions.

\code
// Define the basis variables for Euclidean space
DefVarsE3();

// Define a multivector variable as e1
A = e1;

// Generate a mask for all bivector components
Mask = [0, 			/* Scalar */
		0, 0, 0, 	/* Vector */
		1, 2, 3, 	/* Bivector */
		0			/* Trivector (Pseudoscalar) */
		];

// Generate the multivector product matrix of A
// for the inner product. Apply the mask
// such that only bivector components are
// considered.
MA = GetMVProductMatrix(A, MVOP_INNER, Mask);

// Find the null space of MA with a 
// singular value decomposition
W = SVD(MA);

// Transform the diagonal matrix of the
// singular values to a row vector and
// display it
?Diag = DiagToRow(W(2));

// Transform the singular vectors to multivectors.
// Now you need to specify the mask again, such
// that the matrix components are mapped to the
// correct multivector components.
?V = Matrix2MV(W(3), Mask);

// Print the first(singular) multivector
// which spans the basis of the bivector 
// null space of e1 w.r.t. the inner product.
?V(1);

// Test the caluculation by evaluating the
// inner product with all singular multivectors.
?A . V;
\endcode

From the singluar value diagonal matrix we see that this time the solution is unique, i.e. there exists only a single bivector the lies in the null space of \f$e_1\f$ w.r.t. the inner product.

If you replace the definition of the mask in the above example by 

\code
// Generate a mask for vector components.
// Enforce that e2 and e3 are regarded as
// one dimension in the solution space 
// and must have the same scalar factor.
Mask = [0, 			/* Scalar */
		1, 2, 2, 	/* Vector (e1, e2, e3) */
		0, 0, 0, 	/* Bivector (e23, e31, e12) */
		0			/* Trivector (Pseudoscalar) */
		];
\endcode

then the solution space is two dimensional, whereby the first dimension refers to \f$e_1\f$ and the second dimension to \f$e_2 + e_3\f$. (It is no mistake that vector components of the mask are numbered 1, 2, 2.) The output is now as follows.

\code
Diag = (| 0 1|)
V = ([ 1^e2 + 1^e3 ], [ -1^e1 ])
Constant = 1^e2 + 1^e3
Constant = ([], [ -1 ])
\endcode

We see that the solution is again unique.


\section sec_SolveMV_VersorEqn Solving Versor Equations

You can also use the method described above to solve versor equations. To do so, a feature of the function GetMVProductMatrix() is needed, which was introduced with version 1.5 of CLUScript. This feature is again best descibed with an example. 

\code

DefVarsE3();  // Define variables for E3
A = e1;       // Define multivector A
B = e2;       // Define multivector B

// Evaluate the matrix for the product A * B of the
// components of A summed over index i of the 
// tensor g^k_ij representing the geometric product.
Agp = GetMVProductMatrix(A, MVOP_GP, 1 /* from left  */);
// Do the same for product B * A with components of A
gpA = GetMVProductMatrix(A, MVOP_GP, 0 /* from right */);

// Transform multivector B in matrix representation.
// Bm is a column vector.
Bm = MV2Matrix(B);

C1m = Agp * Bm; // Evaluate A B
C2m = gpA * Bm; // Evaluate B A

?C1 = Matrix2MV(C1m); // Transform C1m back to a multivector
?C2 = Matrix2MV(C2m); // Transform C2m back to a multivector

\endcode

In this example the geometric product matrix for <tt>A</tt> was evaluated twice: assuming that <tt>A</tt> is multiplied from the left (<tt>Agp = GetMVProductMatrix(A, MVOP_GP, 1)</tt>) and assuming it is multiplied from the right (<tt>gpA = GetMVProductMatrix(A, MVOP_GP, 0)</tt>). Therefore, the matrix product of <tt>Agp</tt> with <tt>Bm</tt> is equivalent to the geometric product <tt>A * B</tt>, and the matrix product of <tt>gpA</tt> with <tt>Bm</tt> is equivalent to the geometric product <tt>B * A</tt>. 

This feature is necessary to solve a versor equation of the form \f$V X \tilde{V} = Y\f$, where \f$X\f$ and \f$Y\f$ are known and \f$V\f$ is the unknown. To make \f$V\f$ a proper versor, it has to satisfy the constraint \f$V \tilde{V} = 1\f$. This constraint can be used to write the versor equation from above in a slightly different way.
\f[
V X \tilde{V} = Y \;\iff\; V X - Y V = 0.
\f]
At first sight, it does not seem to be possible to solve this equation for \f$V\f$. However, if we transform it into a matrix equation it may be written as 
\code
gpX * Vm - Ygp * Vm = 0
\endcode
with
\code
gpX = GetMVProductMatrix(X, MVOP_GP, 0 /* from right */);
Ygp = GetMVProductMatrix(Y, MVOP_GP, 1 /* from left  */);
Vm = MV2Matrix(V);
\endcode

This means, that we are simply looking for the null space of the matrix <tt>(gpX - Ygp)</tt>. If we also enforce that the result can only have scalar and bivector components using a mask, then all the constraints we need are enforced \i implicitly. That is, the resulting null space has to consist of versors and nothing else. If we use a singular value decomposition (SVD) to find the null space, then the best versor in a least squares sense should be found. 

Note that it may be shown that the dimension of the null space of the matrix <tt>(gpX - Ygp)</tt> is always a power of two. For each constraint data pair <tt>(X,Y)</tt>, which is taken into account, the power of the dimension of the null space of the matrix is at most reduced by one. The following example will help to clarify this.

\code

// Mask for scalar and bivector components
Mask = [1,
		0, 0, 0,
		2, 3, 4,
		0];

// Create a rotor which we later want to find again
?R = RotorE3(0,1,0, Pi/4);

// Data points
A1 = VecE3(1,0,0);
// Rotate A1 with R
?B1 = R * A1 * ~R;

// Create matrices
gpA1 = GetMVProductMatrix(A1, MVOP_GP, Mask, 0 /* right */);
B1gp = GetMVProductMatrix(B1, MVOP_GP, Mask, 1 /* left  */);

// The matrix from which we need to find the null space
M = gpA1 - B1gp;

// Evaluate SVD
L = SVD(M);

// Diagonal of SVD as row vector
?Diag = DiagToRow(L(2));

// There are two solutions.
// Transform the matrix L(3) which contains the
// singular vectors as columns to multivectors.
MV = Matrix2MV(L(3), Mask);

// The first two multivectors in list MV are
// solutions to the equation.
?"";
?"Solutions for versor:";
?V1 = MV(1);
?V2 = MV(2);

// Check this
?"";
?"Check solutions:";
?Sol1 = V1 * A1 * ~V1;
?Sol2 = V2 * A1 * ~V2;

\endcode

The output of this code is

\code

R = 0.924 + -0.383^e31
B1 = 0.707^e1 + -0.707^e3
Diag = (| 0 0 2 2|)

Solutions for versor:
V1 = 0.924 + -0.383^e31
V2 = -0.924^e23 + 0.383^e12

Check solutions:
Sol1 = 0.707^e1 + -0.707^e3
Sol2 = 0.707^e1 + -0.707^e3

\endcode

Even though the solution space was already reduced by the mask, there are still two solutions. This is because a rotation is not properly constrained by just one point pair. Note that instead of points we can also use any other geometric entity which can be represented in geometric algebra. Here is the same script with two point pairs.

\code

DefVarsE3();

// Mask for scalar and bivector components
Mask = [1,
		0, 0, 0,
		2, 3, 4,
		0];

// Create a rotor which we later want to find again
?R = RotorE3(0,1,0, Pi/4);

// Data points
// This can also be mixed points, planes in E3.
// In P3 or N3 any other geometric entities could be used.
A = [VecE3(1,0,0), VecE3(0,0,1)];
// Rotate data points A with R
?B = R * A * ~R;

// Create matrices
// Since A and B are now a lists of multivectors,
// an appropriate matrix which stack the separate
// matrices for each multivector on top of each other
// is generated.
gpA = GetMVProductMatrix(A, MVOP_GP, Mask, 0 /* right */);
Bgp = GetMVProductMatrix(B, MVOP_GP, Mask, 1 /* left  */);

// The matrix from which we need to find the null space
M = gpA - Bgp;

// Evaluate SVD
L = SVD(M);

// Diagonal of SVD as row vector
?Diag = DiagToRow(L(2));

// There is now only one solution.

// Transform the matrix L(3) which contains the
// singular vectors as columns to multivectors.
MV = Matrix2MV(L(3), Mask);

// The first multivector in list MV is the
// solution to the equation.
?"";
?"Solution for versor:";
?V = MV(1);

// Check this
?"";
?"Check solution:";
?Sol = V * A * ~V;

\endcode

The output created is the following,

\code

R = 0.924 + -0.383^e31
B = ([ 0.707107^e1 + -0.707107^e3 ], [ 0.707107^e1 + 0.707107^e3 ])
Diag = (| 0 2 2 2.828427|)

Solution for versor:
V = 0.924 + -0.383^e31

Check solution:
Sol = ([ 0.707107^e1 + -0.707107^e3 ], [ 0.707107^e1 + 0.707107^e3 ])

\endcode


**/
