/** \page page_WorkWithMV Working with Multivectors

<ul>
	<li>\ref sec_CreateMV
	<li>\ref sec_CalcMV
	<li>\ref sec_VisMV
	<li>\ref sec_Plot
</ul>

In this section I assume that you are familiar with the basics of Clifford (or geometric) algebra. CLUScript currently supports three Clifford algebras: the Euclidean 3-space and the corresponding projective and conformal spaces. You can work with multivectors from all three spaces concurrently in the same script. However, you cannot operate with multivectors of one space onto multivectors of a another space. Instead, you have to cast multivectors explicitly.


<hr>
\section sec_CreateMV Creating Multivectors

Currently only functions to create grade 1 multivectors (i.e. vectors) in the different spaces exist. Higher grade objects have to be build up from vectors. The functions to create vectors are called VecE3(), VecP3(), VecN3() and (<b>new in version 2.0</b>) VecC2() for the different spaces, respectively.

The <tt>VecXX</tt> functions expect either a single counter, a list of two or three scalars or a single multivector. If you pass a single counter the vector can be controlled by the user with the mouse. See the section \ref page_UserInteraction "User Interaction" for more details.
 If you pass three scalars, a vector with the corresponding components in \f$x\f$, \f$y\f$ and \f$z\f$-direction is created. If you only pass two scalars, the \f$z\f$-component is set to zero. However, note that since VecC2() creates a vector in the space of 2D-conics, it accepts at most two parameters. Passing a multivector converts the <b>vector part</b> of this  multivector to the appropriate space.

\attention For drawing multivectors, a right handed coordinate system is used, since this is what OpenGL uses. Therefore, the \f$z\f$-axis points out of the computer screen and not into it. That is, if you want to move something away from the observer you have to move it in the negative \f$z\f$-direction.

For example, <tt>A = VecE3(1,1,1)</tt> assigns to <tt>A</tt> the multivector \f$e_1 + e_2 + e_3\f$. A subsequent code-line like <tt>PA = VecP3(A)</tt> embeds <tt>A</tt> in projective space. That is, <tt>PA</tt> is assigned the multivector \f$e_1 + e_2 + e_3 + e_4\f$.

You can also create rotors with the functions RotorE3(), RotorP3(), RotorN3() and RotorC2(). For conformal space there also exist functions to create a sphere (SphereN3()), a translator (TranslatorN3()) and a dilator (DilatorN3()). For the conic space there is also a function that creates a reflection operator (ReflectorC2()). See the reference manual for more details.

There are four functions to define variables for the basis elements of the different spaces: DefVarsE3(), DefVarsP3(), DefVarsN3() and DefVarsC2(). These functions take no parameters. The following tables show the variables defined by the three functions and their algebraic meaning. All these variables are of the type <tt>multivector</tt>.

<table align="center" border="1" bgcolor="#EEEEEE">
<tr>
	<td>Function </td>
	<td> Variable </td>
	<td> Content </td>
</tr>
<tr>
	<td><tt>DefVarsE3()</tt> </td>
	<td> <tt>id</tt> </td>
	<td> 1 </td>
</tr>
<tr>
	<td></td>
	<td> <tt>e1</tt> </td>
	<td> \f$e_1\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e2</tt> </td>
	<td> \f$e_2\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e3</tt> </td>
	<td> \f$e_3\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>I</tt> </td>
	<td> \f$e_1\wedge e_2\wedge e_3\f$</td>
</tr>
</table>

The three basis vectors of Euclidean space \f$\{ e_1, e_2, e_3 \}\f$ all square to \f$+1\f$. The variable <tt>id</tt> is defined in order to create grade zero multivectors in Euclidean space.

<table align="center" border="1" bgcolor="#EEEEEE">
<tr>
	<td>Function </td>
	<td> Variable </td>
	<td> Content</td>
</tr>
<tr>
	<td><tt>DefVarsP3()</tt> </td>
	<td> <tt>id</tt> </td>
	<td> 1</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e1</tt> </td>
	<td> \f$e_1\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e2</tt> </td>
	<td> \f$e_2\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e3</tt> </td>
	<td> \f$e_3\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e4</tt> </td>
	<td> \f$e_4\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>I</tt> </td>
	<td> \f$e_1\wedge e_2\wedge e_3\wedge e_4\f$</td>
</tr>
</table>

The four basis vectors of projective space \f$\{ e_1, e_2, e_3, e_4 \}\f$ all square to \f$+1\f$. Note that this differs from some researchers which prefer to use a space-time basis for projective space, i.e. \f$\{ e_1, e_2, e_3 \}\f$ square to \f$-1\f$ and \f$e_4\f$ squares to \f$+1\f$. The variable <tt>id</tt> is defined in order to create grade zero multivectors in projective space.

<table align="center" border="1" bgcolor="#EEEEEE">
<tr>
	<td>Function </td>
	<td> Variable </td>
	<td> Content</td>
</tr>
<tr>
	<td><tt>DefVarsN3()</tt> </td>
	<td> <tt>id</tt> </td>
	<td> 1</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e1</tt> </td>
	<td> \f$e_1\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e2</tt> </td>
	<td> \f$e_2\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e3</tt> </td>
	<td> \f$e_3\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>ep</tt> </td>
	<td> \f$e_+\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>em</tt> </td>
	<td> \f$e_-\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e</tt> </td>
	<td> \f$e_\infty\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>einf</tt> </td>
	<td> \f$e_\infty\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e0</tt> </td>
	<td> \f$e_0\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>n</tt> </td>
	<td> \f$n\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>nb</tt> </td>
	<td> \f$\bar{n}\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>I</tt> </td>
	<td> \f$e_1\wedge e_2\wedge e_3\wedge e_+\wedge e_-\f$</td>
</tr>
</table>

In conformal space the four basis vectors \f$\{ e_1, e_2, e_3, e_+ \}\f$ square to \f$+1\f$ and \f$e_-\f$ squares to \f$-1\f$. The composite elements \f$e_\infty, e_0, n, \bar{n}\f$ are defined as

\f[ e_\infty \equiv n := e_- + e_+\;;\quad
e_0 \equiv \bar{n} := \frac{1}{2} (e_- - e_+) \f]

The pairs \f$\{ e_\infty, e_0 \}\f$ and \f$\{ n, \bar{n} \}\f$ are complementary null vectors. That is, \f$e_\infty^2 = e_0^2 = n^2 = \bar{n}^2 = 0\f$ and \f$e_\infty\cdot e_0 = n\cdot \bar{n} = -1\f$. The two naming conventions for these null vector pairs are used by different researchers. Here both are defined so that nobody gets confused.


<table align="center" border="1" bgcolor="#EEEEEE">
<tr>
	<td>Function </td>
	<td> Variable </td>
	<td> Content</td>
</tr>
<tr>
	<td><tt>DefVarsC2()</tt> </td>
	<td> <tt>id</tt> </td>
	<td> 1</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e1</tt> </td>
	<td> \f$e_1\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e2</tt> </td>
	<td> \f$e_2\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e3</tt> </td>
	<td> \f$e_3\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e4</tt> </td>
	<td> \f$e_4\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e5</tt> </td>
	<td> \f$e_5\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>e6</tt> </td>
	<td> \f$e_6\f$</td>
</tr>
<tr>
	<td></td>
	<td> <tt>I</tt> </td>
	<td> \f$e_1\wedge e_2\wedge e_3\wedge e_4\wedge e_5\wedge e_6\f$</td>
</tr>
</table>

The six basis vectors of conic space \f$\{ e_1, e_2, e_3, e_4, e_5, e_6 \}\f$ all square to \f$+1\f$. Vectors in this space basically encode symmetric 3 by 3 matrices. Details on the embedding can be found in the technical report <i>"Analysis of Local Image Structure using Intersections of Conics"</i> (<a href="http://www.perwass.de/published/perwass_tr0403_v1.pdf">download</a>). Given a symmetric 3 by 3 matrix it can be embedded in conic space by passing it through the function VecC2(). The opposite is also possible, by passing a vector in conic space to the function Matrix(). Here is an example of that.

\code
	_2dView = 1;

	?M = Matrix( [[1, 0, 0], [0, -1, 0], [0, 0, -1]] );
	?C = VecC2(M);
	:IPNS;
	:Red;
	:C;

	:OPNS;
	?X = VecC2(1,0);
	:Blue;
	:X;
	?N = Matrix(X);
	\endcode

	This script produces the output

	\code
	M = (| 1 0 0|, | 0 -1 0|, | 0 0 -1|)
	C = -0.707^e3 + 0.707^e4 + -0.707^e5
	X = 1^e1 + 0.707^e3 + 0.707^e4
	N = (| 1 0 1|, | 0 0 0|, | 1 0 1|)
\endcode



<hr>
\section sec_CalcMV Calculating with Multivectors

For all of the most important operations with multivectors an operator has been defined.  The geometric product is the <tt>*</tt>, the inner product is the <tt>.</tt> and the outer product is the <tt>^</tt> operator. The prevalence of the operators also has been defined according to the usual standard. That is, \f$A\cdot B\,C = (A\cdot B)\,C\f$, \f$A\wedge B\, C = (A\wedge B)\,C\f$ and \f$A\cdot B\wedge C = A\cdot (B\wedge C)\f$. 

Division of multivectors is also defined through the operator <tt>/</tt>, whereby \f$A / B = A B^{-1}\f$.

\attention The inner product of a scalar with any type of multivector or scalar is identically zero by definition.

The other operators defined are the reverse <tt> ~</tt>, the inverse <tt>!</tt>, the <b>main involution</b> <tt>'</tt>, the dual <tt>*</tt>, the meet <tt>\&</tt>, the join <tt>|</tt> and the grade projection <tt>°</tt>. The inverse operator returns a zero multivector if the given multivector has no inverse.

\attention 
<b>From version 1.4 onwards</b>, the grade projection operator of multivectors is no longer <tt>\#</tt> but <tt>°</tt>. <b>From version 2.0 onwards</b>, the selection operator <tt>()</tt> can be used to extract single component elements from a multivector.

The grade projection operator expects a multivector on the LHS and a counter on the RHS. For example, if <tt>A</tt> is a multivector variable then <tt>A°2</tt> is equivalent to \f$< A >_2\f$. You can also select elements of a multivector with the selection operator <tt>()</tt>. For example,

\code
DefVarsE3();

?A = 1 + 2*e1 + 3*I;

?A(1);
?A(2);
?A(8);

?A°1;
\endcode

produces the output
\code
A = 1 + 2^e1 + 3^I
Constant = 1
Constant = 2
Constant = 3
Constant = 2^e1
\endcode

The main involution operator <tt>'</tt> only has an effect in conformal space, since there exists a basis vector with a negative signature. Here is an example that shows the effect.

\code
	DefVarsN3();
	
	?em;
	?'em;
	
	?e1;
	?'e1;
\endcode

This script has the output

\code
em = 0.5^e + 1^e0
Constant = -0.5^e + -1^e0
e1 = 1^e1
Constant = 1^e1
\endcode


The join and meet operations only make sense when applied to blades. They will still give a result if their operands are no blades but that result is not useful. I gave the join and meet the symbols for bitwise OR (<tt>|</tt>) and bitwise AND (<tt>\&</tt>), as defined in C/C++, since this is what they do for blades. Note that the meet of a non-zero scalar with a blade returns 1. The join of a non-zero scalar with a blade returns the normalized blade. In fact, the join always returns a normalized blade.

\anchor anchor_JoinMeetNullBlades
From version 1.5 onwards, the meet and join operation now also work for null blades, which can turn up in conformal space. Note that the standard definition of join and meet do not include the case of null blades. I therefore extended the definition for this case, such that they are still useful operations. For example, in conformal space the intersection point of a line and a plane will be of the form \f$X\wedge e_\infty\f$, where \f$X\f$ is the intersection point embedded in conformal space and \f$e_\infty\f$ is the point at infinity. Suppose we have a second point of this form \f$Y\wedge e_\infty\f$. If we are now interested in the line passing through them we cannot simply calculate \f$X\wedge e_\infty\wedge Y\wedge e_\infty\f$ since this is zero. However, if the join operation could give us \f$X\wedge Y\wedge e_\infty\f$, we would optain just the line we are looking for. And this is also how the extended join operation works. The extended meet work analogously, such that, for example, 
\f$(e_1\wedge e_\infty)\vee (e_2\wedge e_\infty) = e_\infty. \f$
Note that the function FactorizeBlade() also factorizes null blades properly from version 1.5 onwards. Here is an example script to demonstrate these properties.
\code

DefVarsN3();

// Define two null blades
?A = VecN3(1,0,2) ^ e;
?B = VecN3(0,1,1) ^ e;

// Their join
?J = A | B;

// Their meet
?M = A & B;

\endcode
This script produces the following output.
\code
A = 1^(e1^e) + 1^(e2^e) + -1^E
B = 1^(e2^e) + 1^(e3^e) + -1^E
J = 0.707^(e23^e) + -0.707^(e31^e) + 0.707^(e12^e) + -0.707^(e1^E) + 0.707^(e3^E)
M = 1.414^e
\endcode

\anchor anchor_AND_OR_Operator
\attention When the operators <tt>\&</tt> and <tt>|</tt> are applied to two counters, then a bitwise AND and OR operation is performed between the counters, respectively.

Here is an example of the bitwise AND and OR operations.
\code
? 1 & 2;
? 3 & 2;
? 1 | 2;
? 3 | 2;
\endcode
which produces the following output
\code
Constant = 0
Constant = 2
Constant = 3
Constant = 3
\endcode

You can take a multivector to the power of an integer value with the function <tt>pow</tt>. For example, <tt>pow(e1^e2, 3)</tt> returns the third power of \f$e_1\wedge e_2\f$ which is \f$-e_1\wedge e_2\f$. However, <tt>pow(e1^e2, 3.5)</tt> returns a runtime error message. 

A function to evaluate the factorial of an integer value also exists (<tt>fact</tt>). It evaluates the factorial of integers between 0 and 170. Together with the <tt>pow</tt> function this enables you to evaluate Taylor expansions of multivector functions. 

By the way, to evaluate the Taylor series of the exponential function of a multivector up to degree twelve, you can use the function <tt>exp</tt>.




<hr>
\section sec_VisMV Visualizing Multivectors

One of the most interesting features of CLUScript is that you can visualize multivectors very easily. Of course, not every multivector has a geometric interpretation, but blades and rotors can be represented geometrically. The geometric representation of blades can be given either as their outer or inner product null space. That is, a blade \f$A_{<k>}\f$ of grade \f$k\f$ represents the subspace of vectors \f$X\f$ which either satisfy \f$A_{<k>}\wedge X = 0\f$ or \f$A_{<k>}\cdot X = 0\f$. Since \f$(A_{<k>}\wedge X)^* = A_{<k>}\cdot X^*\f$ the inner product null space (IPNS) is dual to the outer product null space (OPNS). 

Per default blades are represented through their OPNS in all spaces. You can also switch explicitly to the representation of blades through their IPNS using the function <tt>SetMode</tt>. From version 1.4 onwards you can switch between the OPNS and IPNS representation using the variables <tt>OPNS</tt> and <tt>IPNS</tt> respectively. For example, if you write <tt>SetMode(IPNS)</tt>, multivectors <b>in all spaces</b> are visualized by interpreting their inner product null space.
Clearly, depending on the space they are in, blades represent different geometric entities. 

In general, planes and circles are sided geometric entities in Clifford algebra. That is, they have a front and a back. When you visualize a plane in a particular color, the front side of the plane appears in just that color, the back however, is drawn in a darker version of that color. Also the front side is more reflective than the back. This visualizes the sidedness of planes. For circles, the front side of a circle reflects light stronger than the back.

Lines and planes are drawn centered on the point on the line or plane that is closest to the origin. This may not always be the most useful representation. At times you might want to change the offset vector of a line or plane. In order to do so you can use the function <tt>Offset</tt>. This function takes either two or three parameters. The first parameter is always the blade that you want to draw with a different offset vector and the second parameter is the new offset vector. The offset vector can be a vector defined in any space, as long as it represents a point in Euclidean space. The third, optional, parameter is the new scale of the line or plane. In the following example it is shown how to draw a line between two points in projective space. You can find this example under <tt>LineP3.clu</tt>. Also take a look at <tt>StereoCamera.clu</tt> for a more advanced example.

\code

// Define P3 Variables
DefVarsP3();

// Normalized homogeneous vectors
:A = 2*e1 + e4:Red;
:B = 3*e2 + e4:Blue;
L = A^B;

// Direction of line
:V = L . e4:Green;

// Draw line starting at A with length sqrt(V.V)
:Yellow;
Offset(L, A, sqrt(V.V));
\endcode

Rotors can also be visualized. They are always represented in the same way: a section of disc representing the rotation angle and a rotation axis. Rotations are always performed anti-clockwise with respect to the rotation axis. Note that the top-side of the disc section is visualized in a brighter color than the back-side. This gives you an additional visual cue to the orientation of the rotation plane. Furthermore, the disc is transparent, so as not to clutter the visualization too much.

\attention In conformal space you can only display rotors that either rotate about an axis through the origin (pure rotation), or general rotors of the type \f$TR \tilde{T}\f$, where \f$R\f$ is a pure rotor and \f$T\f$ is a translator. Translators can also be visualized but not objects of the type \f$TR\f$.

Multivectors are visualized in CLUScript with the <tt>:</tt> operator. Simply write <tt>:VecE3(1,2,3):Red</tt> to draw the vector \f$e_1 + 2e_2 + 3e_3\f$ using the color red. (Recall that the colon operator is executed from right to left.) In the following I will list the special visualization features in the three spaces Euclidean, projective and conformal.

\attention The visualization engine is a state-machine. This means that if you apply a color to the state-machine via <tt>:Red</tt>, for example, then this color stays active until you switch to a different color. This is also true for the visualization modes that can be set with the function <tt>SetMode</tt>. They stay active until changed. Nevertheless, if a script is executed multiple times, standard variables like the current color or the drawing modes are reset to standard values before each execution. In this way you can always be sure of these states at the beginning of a script, even if states are changed within the script.

The predefined colors currently available in CLUScript are controlled through the variables <tt>Red</tt>, <tt>Green</tt>, <tt>Blue</tt>, <tt>Magenta</tt>, <tt>Cyan</tt>, <tt>Yellow</tt>, <tt>Orange</tt>, <tt>Black</tt>, <tt>White</tt>. Each of these colors also has a medium bright and a dark version. These are named like the basic color prefixed by a <tt>M</tt> or <tt>D</tt>, respectively.

Another global visualization switch is #DRAW_POINT_AS_SPHERE, which is independent of any space. After applying this switch using SetMode() or the operator \c : all points are drawn as small spheres. You can switch back to the default mode with #DRAW_POINT_AS_DOT.


\subsection subsec_VisE3 Visualizing in Euclidean Space

In Euclidean space you can draw vectors, bivectors and the pseudoscalar. Scalars are not drawn. 

<ul>
<li> \b Vectors. A vector is represented as a point at the position given by the vector and a line connecting the point with the origin. This is meant to visualize the double meaning of vectors in Euclidean space: on the one hand they may represent points, but on the other hand vectors are used to represent directions and hence the line. Note that the OPNS of a vector is a line through the origin. You can also change this visualization by using the following variables in the function <tt>SetMode</tt>:
<ul>
	<li>
	<tt>E3_DRAW_VEC_AS_LINE</tt>
	This switches the visualization of vectors to the standard as described above.
	
	<li>
	<tt>E3_DRAW_VEC_AS_ARROW</tt>
	This switches the visualization to arrows.
	
	<li>
	<tt>E3_DRAW_VEC_AS_POINT</tt>
	This switches the visualization to points.
</ul>
For example, if you want to draw the vector \f$e1\f$ as an arrow, write
\code

// Define the variables for E3
DefVarsE3();

// Set the mode.
// You could also simply write 
//    :E3_DRAW_VEC_AS_ARROW;
//
SetMode(E3_DRAW_VEC_AS_ARROW);

// Draw the vector
:e1;
\endcode

<li> \b Bivectors are represented by planes passing through the origin. As mentioned before the front side of a plane is drawn in a brighter color than the back. The area of the plane is equal to the magnitude of the bivector. You can also influence how planes are visualized by using the following two variables.
<ul>
	<li>
	<tt>E3_DRAW_PLANE_AS_RECT</tt>
	This switches the visualization of planes to rectangles.
	
	<li>
	<tt>E3_DRAW_PLANE_AS_DISK</tt>
	This switches the visualization of planes to discs.
</ul>

<li> \b Trivectors are proportional to the pseudoscalar in Euclidean space. Hence a trivector is represented as a cube centered on the origin. This is meant to represent that the OPNS of a trivector is the whole space. The volume of the cube is equal to the magnitude of the trivector.
</ul>


\subsection subsec_VisP3 Visualizing in Projective space

In projective space you can draw vectors, bivectors, trivectors and four-vectors. Scalars are not drawn. 

<ul>
<li> \b Vectors. A vector is represented as a point at the position given by the vector. If the vector has no \f$e_4\f$ component it is also called a direction vector and is represented as an arrow pointing in the appropriate direction from the origin.

<li> \b Bivectors are represented by lines. Lines are always centered on the point on the line which lies closest to the origin. The length of a line is equal to the magnitude of the bivector. If the bivector represents a line at infinity then it is represented as a rhombus centered on the origin.

<li> \b Trivectors are represented by planes. Planes are always centered on the point on the plane that lies closest to the origin. The area of the plane is equal to the magnitude of the trivector. If the trivector represents a plane at infinity then it is represented by a tetrahedron centered on the origin.

<li> \b Quadvectors are proportional to the pseudoscalar. As in Euclidean space they are represented by a cube centered on the origin. The volume of the cube is equal to the magnitude of the quadvector.
</ul>



\subsection subsec_VisN3 Visualizing in Conformal space

In conformal space you can draw vectors, bivectors, trivectors, quadvectors and quintvectors. Scalars are not drawn. You can either draw the IPNS (default) or OPNS of blades. To switch between these modes call the function <tt>SetMode</tt> with the parameters <tt>N3_IPNS</tt> and <tt>N3_OPNS</tt>, respectively. For example, <tt>SetMode(N3_IPNS)</tt> switches to IPNS mode. Furthermore, spheres can either be drawn as wire-frames (default) or as solid spheres. To switch between these modes use <tt>N3_WIRE</tt> and <tt>N3_SOLID</tt>, respectively. Note that you can set any number of modes in a single call to <tt>SetMode</tt>. For example, <tt>SetMode(N3_IPNS, N3_SOLID)</tt> sets both modes. From CLUScript version 1.3 onwards also imaginary objects are visualized. That is, points pairs, circles and spheres with imaginary radius are drawn in a special form, as detailed below. By default imaginary objects are drawn. You can switch this off with the variable <tt>N3_HIDE_IMAG</tt>. In order to show imaginary objects again use the switch <tt>N3_SHOW_IMAG</tt>.

Unless stated otherwise, the following discussion of blades refers to their OPNS.

<ul>
<li> \b Vectors. A vector is represented as a point at the appropriate position if it is a null vector. A null vector is a vector of the form \f$X = \mathbf{x} + \frac{1}{2}\mathbf{x}^2 e + e_0\f$, where \f$\mathbf{x}\f$ is the corresponding vector in \ESpc. The function <tt>VecN3</tt> creates vectors of this type. The IPNS of a vector can also represent a sphere. In that case the vector has the form \f$S = X - \frac{1}{2}\rho^2 e\f$, where \f$\rho\f$ is the radius of the sphere. In this respect the IPNS of a vector of the form \f$S = X + \frac{1}{2}\rho^2 e\f$ refers to a sphere with radius \f$\sqrt{-1}\,\rho\f$, i.e. a sphere with an imaginary radius. Such spheres are visualized as transparent objects when the visualization mode <tt>N3_SHOW_IMAG</tt> is set (default).

A vector of the form \f$X = \mathbf{x}\f$ projects to infinity in Euclidean space since it has no \f$e_0\f$ component. Nevertheless, the IPNS of such a vector is a plane that goes through the origin. Its OPNS on the other hand is \f$\alpha \mathbf{x}\f$ where \f$\alpha\f$ is some scalar. That is, it does not actually have an OPNS we could visualize. Despite this, such a vector may be interpreted as a point at infinity or direction vector as in projective space. It is therefore visualized as an arrow.


<li> \b Bivectors represent point pairs if created by two null vectors. For example, if \f$X, Y\f$ are two null vectors as defined above, then \f$X\wedge Y\f$ represents the point pair \f$(X, Y)\f$. Accordingly, such a bivector is visualized as the corresponding point pair. A point pair can also be regarded as a one-dimensional sphere and may also have an imaginary radius in this respect. Such imaginary point pairs are visualized as two points with a dotted line in between. A bivector of the form \f$X\wedge n\f$ may then also be interpreted as the point pair \f$(X, n)\f$, whereby \f$n\f$ represents the point at infinity. Such bivectors are also called the \emph{affine representation} of points. Therefore, they are visualized just as the single point \f$X\f$.

<li> \b Trivectors either represent lines or circles. If \f$X,Y,Z\f$ are null vectors then a trivector of the type \f$X\wedge Y\wedge Z\f$ represents a circle through points \f$X\f$, \f$Y\f$ and \f$Z\f$. Such a trivector may also represent a circle with imaginary radius, in which case it is visualized as a dotted circle. A trivector of the type \f$X\wedge Y\wedge n\f$ accordingly represents a circle through the points \f$X\f$, \f$Y\f$ and \f$n\f$, the point at infinity. Such a circle of infinite radius is equivalent to a line through \f$X\f$ and \f$Y\f$ and will be visualized as such.

<li> \b Quadvectors either represent planes or spheres. If \f$X, Y, Z, W\f$ are null vectors then a quadvector of the type \f$X\wedge Y\wedge Z\wedge n\f$ represents a sphere through points \f$X\f$, \f$Y\f$, \f$Z\f$, \f$n\f$, i.e. a sphere of infinite radius which is visualized as the plane through \f$X\f$, \f$Y\f$ and \f$Z\f$. A quadvector of the type \f$X\wedge Y\wedge Z\wedge W\f$ represents a sphere if and only if the four vectors are not co-planar. Such a quadvector may also represent a sphere with imaginary radius, in which case it is visualized as a transparent sphere. Furthermore, in conformal space the outer product of four null vectors that represent four co-planar points in Euclidean space is not null! Instead it represents the plane through the four points. Take a look at the script <tt>Sphere.clu</tt> to play around with these effects.

<li> \b Quintvectors are proportional to the pseudoscalar. They are represented as cubes centered on the origin.
</ul>

Note that Euclidean space and projective space can be regarded as being embedded in conformal space. In general one can say that if you take an algebraic object in conformal space that represents a geometric entity and wedge it with \f$n\f$ (the point at infinity) you get an object in projective space in which the conformal space object is embedded. For example, take a point pair \f$X\wedge Y\f$ in \NSpc. \f$X\wedge Y\wedge n\f$ gives the line that goes through both points. Also, if \f$X\wedge Y\wedge Z\f$ represents a circle in conformal space, then \f$X\wedge Y\wedge Z\wedge e\f$ represents the plane in which the circle lies. If such algebraic entities are then also wedged with \f$e_0\f$ (the origin), then we go to Euclidean space. For example, given the point \f$X = \mathbf{x} + \frac{1}{2}\mathbf{x}^2 e + e_0\f$, then \f$X\wedge e\wedge e_0\f$ represents the line through the origin in the direction of \f$\mathbf{x}\f$. This is exactly what we would obtain when visualizing \f$\mathbf{x}\f$ in Euclidean space. Similarly, \f$X\wedge Y\wedge e\wedge e_0\f$ is a plane through the origin and \f$X\wedge Y\wedge Z\wedge e\wedge e_0\f$ is the whole space.

Also note that, for example, the OPNS of \f$e1\wedge e\f$ is visualized as an arrow, which is to represent a point at infinity.
The OPNS of \f$e1\wedge e2\wedge e\f$ is a line at infinity. This is visualized as a doted circle with two arrows. The OPNS of \f$e1\wedge e2\wedge e3\wedge e\f$ is a plane at infinity which is visualized as a rhombus with arrows. The same can be obtained by visualizing the IPNS of \f$e1\wedge e2\wedge e\f$, \f$e1\wedge e\f$ and \f$e\f$, respectively. Furthermore, the intersection of a plane with a circle lying in a parallel plane gives an imaginary point pair at infinity. Here is an example script, which creates such an object.

\code
	DefVarsN3();
	
	// The Plane
	:Red;
	:P = VecN3(0,0,0)^VecN3(1,0,0)^VecN3(0,0,1)^e;
	
	// The Circle
	:Blue;
	:C = VecN3(0,1,0)^VecN3(1,1,0)^VecN3(0,1,1);
	
	// Their intersection
	:Green;
	:X = P & C;
\endcode

The visulization looks like this.

\image html MVVisEx1.jpg



\subsection subsec_VisC2 Visualizing in Conic Space

The 6D-conic space implemented, basically embeds symmetric 3 by 3 matrices. The Clifford algebra over this vector space allows for the construction of conics through the outer product of five points. The result is the 2d-conic that passes through the five points, which is unique. So far, conics and the intersection of two conics can be visualized. For example,

\code
_2dView = 1;
:DRAW_POINT_AS_SPHERE;

A = VecC2(1,0);
B = VecC2(-1,0);
C = VecC2(0,1);
D = VecC2(0,-1);

:Red;
:E = VecC2(1);	// user interaction

:White;
:conic = A^B^C^D^E;	// Conic through A,B,C,D,E

:Orange;
:conic2 = A^B^C^D^VecC2(1,1);

// Intersection of both conics
:Green;
:conic & conic2;	// The standard meet operation
\endcode

produces the following visualization after moving the point \c E with the mouse a bit.

\image html MVVisConicEx1.jpg



<hr>
\section sec_Plot Plotting Vector Functions

The funtion Plot() allows you to create 1D and 2D-parametric plots. For example, to draw the function \f$f(x) = x^2\f$ in the range \f$[-2,2]\f$ with 40 steps you need to write <tt>:Plot( x*e1 + x*x*e2, [x, -2, 2, 40])</tt>. The first parameter of Plot() gives the function that is to be plotted. This function needs to return something that represents a point Euclidean 3D-space. For example, you can draw the function \f$sin(x)/x\f$ also as follows.

\code
 
DefVarsP3();
:Plot(0.1*x*x*e1 + sin(x)*e2 + x*e4, [x, -4*Pi, 4*Pi, 61]);
\endcode

Although the vector returned by the function lies in projective space, it is projected into Euclidean space before being plotted. Note that the function would not be evaluated correctly at the position \f$x = 0\f$. By choosing 61 steps to draw the function we simply jump over this (undefined) point.

The return value of Plot() is of type <tt>vertexlist</tt>. A vertex list simply contains a number of vertices, i.e. 3D-points, that are connected in some way when drawn. A vertex list can be drawn with the colon operator. Therefore, we can also write:

\code
 
DefVarsE3();
SINC_P2 = Plot(0.1*x*x*e1 + sin(x)*e2 + x*e3, [x, -4*Pi, 4*Pi, 61]);
SINC_E2 = Plot(0.1*x*e1 + sin(x)/x*e2, [x, -4*Pi, 4*Pi, 61]);

// Print the vertices
?SINC_P2;
?SINC_E2;

// Now plot both functions
:SINC_P2:Red;
:SINC_E2:Blue;
\endcode

The two plots are first saved in VertexList variables, then their values are printed and in the end they are drawn. The visualization looks like this:

\image html PlotEx4.jpg


The Plot() function simply executes the commands passed as first parameter for every value of the free parameter. This does not mean that you have to use the free parameter in the function. Therefore, we can for example draw coupled twists in the following way.

\code
 
DefVarsE3();
A = e1;
B = e1;

R = RotorE3(0, 0, 1, 10*RadPerDeg);
R2 = RotorE3(0, 0, 1, -5*RadPerDeg);

:Green;
:Plot((A = R*A*~R) + (B = R2*B*~R2), [x, 0, 1, 72]);
\endcode

This produces the visualization:

\image html MVVisPlotEx1.jpg

Here the function <tt>(A = R*A* ~R) + (B = R2*B* ~R2)</tt> is simply executed 73 times. Note that since the given range is split into 72 parts, the function is evaluated at 73 points. Since <tt>A</tt> and <tt>B</tt> are at every step replaced with a rotated version of themselves, the resultant plot is that of a coupled twist. <b>Take a look</b> at the script <tt>Plot1.clu</tt> for a more advanced example.

Just as you can draw point-valued 1D-functions, it is also possible to draw circle- and line-valued 1D-functions, as well as point-valued 2D-functions, i.e. surfaces. Circle-valued functions are functions that return 3-blades in conformal space which represent circles in Euclidean space. Similarly, line-valued functions are functions that return 2-blades in projective space or 3-blades in conformal space, which represent lines. In both cases, Plot() draws the surface spanned by the circles or lines. Here is a simple example of a circle valued function.

\code

	f1 = { x = _P(1); VecN3(x,0.1,0) }
	f2 = { x = _P(1); VecN3(0,-0.1,x) }
	f3 = { x = _P(1); VecN3(-0.1,x,0) }

	:Red;
	:Plot(f1(x), [x,-1,1,20]);

	:Green;
	:Plot(f2(x), [x,-1,1,20]);

	:Blue;
	:Plot(f3(x), [x,-1,1,20]);

	:White;
	:Plot(f1(x)^f2(x)^f3(x), [x, -1, 1, 20]);

\endcode

This produces the following visualization

\image html PlotCircSurf1.jpg


Such circle surfaces are actually easier to view, if the color changes along the surface. This can be achieved by adding a color function. The last line of the previous example then looks like this.

\code

	:Plot([ f1(x)^f2(x)^f3(x),				// The function
			Color(x*x, 0.8*Ran(), 1-x*x)],	// The colors
		  [x, -1, 1, 20]);

\endcode

This results in the following.

\image html PlotCircSurf2.jpg


If you want to plot a 2D-function, you can also use the Plot() function. Here is an example.

\code

	:Plot(VecE3(y, 0.3*cos(2*Pi*x*y), x), 
			[x, -1, 1, 20],
			[y, -1, 1, 20]);

\endcode

The surface looks like this.

\image html Plot2DSurf1.jpg


You can now also add a color function and also a normal function. Both are optional and their order is also arbitrary. However, the first function has to be the function to be plotted. If no normal function is given, the normals are evaluated numerically. Here is an example with a color and normal function.

\code

	:Plot( [ VecE3(y, 0.3*cos(2*Pi*x*y), x),		// The function
			 Color(x*x, x*x*y*y, y*y),				// The color
			 *( VecE3(0,-0.6*Pi*y*sin(2*Pi*x*y),1)	// The normal
			   ^VecE3(1,-0.6*Pi*x*sin(2*Pi*x*y),0))
			],
			[x, -1, 1, 20],
			[y, -1, 1, 20]);
			
\endcode

This generates the following visualization.

\image html Plot2DSurf2.jpg


It can also be interesting to draw the normals on top of the surface. This is achieved by adding a fourth parameter to Plot(), which gives the size of the normals. Note that you need not give a normal function in order to draw the normals. When normals are drawn, Plot() returns a list of two vertex lists. The first element of this list is the vertex list for the surface and the second one is the vertex list for the normals. Have a look at the example script '<code>PlotTest4.clu</code>' for an example of how this can be used advantageously. Here is the example from above, now with normals drawn.

\code

	:Plot( [ VecE3(y, 0.3*cos(2*Pi*x*y), x),		// The function
			 Color(x*x, x*x*y*y, y*y),				// The color
			 *( VecE3(0,-0.6*Pi*y*sin(2*Pi*x*y),1)	// The normal
			   ^VecE3(1,-0.6*Pi*x*sin(2*Pi*x*y),0))
			],
			[x, -1, 1, 20],
			[y, -1, 1, 20],
			0.1);
			
\endcode

This generates the following visualization.

\image html Plot2DSurf3.jpg

Here is yet another example with a more interesting surface.

\code

	:Plot( [ VecE3(0.3*cos(2*Pi*y), 0.3*cos(2*Pi*x), x*y),		// The function
		 	 Color(x*x,y*y,x*x*y*y)								// The color
		 	],
			[x, -1, 1, 20],
			[y, -1, 1, 20]);

\endcode

It looks like this.

\image html Plot2DSurf4.jpg


Also have a look at the functions DrawLineSurface(), DrawCircleSurface(), DrawPointSurface() and DrawPointGrid(). In fact, the function Plot() uses these to do the advanced plotting.

**/
