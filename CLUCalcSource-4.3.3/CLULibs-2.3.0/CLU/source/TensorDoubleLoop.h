/// LICENSE START
////////////////////////////////////////////////////////////////////////////////////
//
// This file is part of the CLU Library.
//
// 
// Copyright (C) 1997-2004  Christian B.U. Perwass
//
//    This program is free software; you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation; either version 2 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program; if not, write to the Free Software
//    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The GNU Library General Public License can be found in the file
// license.txt distributed with this library.
//
// Please send all queries and comments to
//
// email: help@clucalc.info
// mail: Institut fuer Informatik, Olshausenstr. 40, 24098 Kiel, Germany.
//
////////////////////////////////////////////////////////////////////////////////////
/// LICENSE END

// Tensor Single Loop Library declaration

#ifndef _TENSOR_DOUBLE_LOOP_HH_
#define _TENSOR_DOUBLE_LOOP_HH_

#include <map>

#include "mem.h"
#include "makestr.h"
#include "cstr.h"
#include "mathelp.h"
#include "CLUException.h"
#include "TensorData.h"
#include "TensorIdx.h"

using std::map;


template<class CType>
class CTensorDoubleLoop
{
public:
	class InvalidLoopLevel : public CCLUError
	{
	public:
		InvalidLoopLevel()
		{
			m_sErrorText = "Invalid loop level.";
		}
	};

	class InvalidTensorIdxRef : public CCLUError
	{
	public:
		InvalidTensorIdxRef()
		{
			m_sErrorText = "Invalid tensor index reference.";
		}
	};

	class IncompatibleIndices : public CCLUError
	{
	public:
		IncompatibleIndices()
		{
			m_sErrorText = "Indices are incompatible.";
		}
	};


public:
	struct SIdxData
	{
		int iFreeIdx;
		int iCount;		// Number of steps in this loop
		bool bBoth;		// If true, both loops need to be stepped.
						// If false, only m_pTFirst needs to be stepped.
		CTensorIdx<CType> *pTFirst;
		CTensorIdx<CType> *pTSecond;
	};

public:
	CTensorDoubleLoop();

	// Set Tensor Idx over which to loop
	void Set(CTensorIdx<CType>& rTLeft, CTensorIdx<CType>& rTRight) throw (CCLUException);

	// Initialize Loops. Returns number of cascaded loops.
	int Init() throw (CCLUException);

	// Step loop. Returns loop level, in which step was made.
	// Loop level starts at maximum for most inner loop (same value as returned from Init()).
	// If loop level is zero, all loops are finished.
	// No exceptions generated by this function!
	int Step();

	// Get number of steps at particular loop level.
	int StepCount(int iLevel) throw (CCLUException);

	// Returns true if both loops are stepped at given loop level
	bool IsDoubleLoop(int iLevel) throw (CCLUException);

	// Returns free index for given loop level
	int FreeIdx(int iLevel) throw (CCLUException);

	// Get Reference to current element of left tensor in loop
	CType& GetLeftRef() { return m_pTLeft->GetStepRef(); }

	// Get Reference to current element of right tensor in loop
	CType& GetRightRef() { return m_pTRight->GetStepRef(); }

protected:
	CTensorIdx<CType> *m_pTLeft, *m_pTRight;		// Pointer to CTensorIdx instance

	Mem<SIdxData> m_mFreeIdx;	// list of free indices
};


#endif
